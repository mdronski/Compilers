Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statements
Rule 2     statements -> { statements }
Rule 3     statements -> statements statement
Rule 4     statements -> statement
Rule 5     statements -> statements { statements }
Rule 6     statement -> assignment
Rule 7     statement -> flow_control
Rule 8     assignment -> variable assignment_op expression ;
Rule 9     assignment_op -> =
Rule 10    assignment_op -> ADDASSIGN
Rule 11    assignment_op -> SUBASSIGN
Rule 12    assignment_op -> MULASSIGN
Rule 13    assignment_op -> DIVASSIGN
Rule 14    expression -> variable
Rule 15    expression -> constant
Rule 16    expression -> matrix
Rule 17    expression -> un_op
Rule 18    expression -> bin_op
Rule 19    expression -> logic_op
Rule 20    expression -> ( expression )
Rule 21    constant -> INTNUM
Rule 22    constant -> FLOATNUM
Rule 23    constant -> STRING
Rule 24    variable -> ID
Rule 25    variable -> matrix_access
Rule 26    value -> variable
Rule 27    value -> matrix
Rule 28    value -> constant
Rule 29    matrix_access -> ID [ int_sequence ]
Rule 30    matrix -> EYE ( int_sequence )
Rule 31    matrix -> ZEROS ( int_sequence )
Rule 32    matrix -> ONES ( int_sequence )
Rule 33    matrix -> [ matrix_row ]
Rule 34    int_sequence -> int_sequence , INTNUM
Rule 35    int_sequence -> INTNUM
Rule 36    matrix_row -> matrix_row , value
Rule 37    matrix_row -> value
Rule 38    bin_op -> expression + expression
Rule 39    bin_op -> expression * expression
Rule 40    bin_op -> expression - expression
Rule 41    bin_op -> expression / expression
Rule 42    bin_op -> expression DOTADD expression
Rule 43    bin_op -> expression DOTSUB expression
Rule 44    bin_op -> expression DOTMUL expression
Rule 45    bin_op -> expression DOTDIV expression
Rule 46    logic_op -> expression EQ expression
Rule 47    logic_op -> expression NEQ expression
Rule 48    logic_op -> expression > expression
Rule 49    logic_op -> expression < expression
Rule 50    logic_op -> expression LE expression
Rule 51    logic_op -> expression GE expression
Rule 52    un_op -> expression '
Rule 53    un_op -> - expression
Rule 54    flow_control -> conditional_statement
Rule 55    flow_control -> while_loop
Rule 56    flow_control -> for_loop
Rule 57    flow_control -> return_instr
Rule 58    flow_control -> break_instr
Rule 59    flow_control -> continue_instr
Rule 60    flow_control -> print_instr
Rule 61    conditional_statement -> IF ( logic_op ) conditional_instructions
Rule 62    conditional_statement -> IF ( logic_op ) conditional_instructions ELSE conditional_instructions
Rule 63    conditional_instructions -> statement
Rule 64    conditional_instructions -> { statements }
Rule 65    while_loop -> WHILE ( logic_op ) conditional_instructions
Rule 66    for_loop -> FOR ID = expression : expression conditional_instructions
Rule 67    return_instr -> RETURN expression ;
Rule 68    continue_instr -> CONTINUE ;
Rule 69    break_instr -> BREAK ;
Rule 70    print_instr -> PRINT instructions_to_print ;
Rule 71    instructions_to_print -> instructions_to_print , expression
Rule 72    instructions_to_print -> expression

Terminals, with rules where they appear

'                    : 52
(                    : 20 30 31 32 61 62 65
)                    : 20 30 31 32 61 62 65
*                    : 39
+                    : 38
,                    : 34 36 71
-                    : 40 53
/                    : 41
:                    : 66
;                    : 8 67 68 69 70
<                    : 49
=                    : 9 66
>                    : 48
ADDASSIGN            : 10
BREAK                : 69
CONTINUE             : 68
DIVASSIGN            : 13
DOTADD               : 42
DOTDIV               : 45
DOTMUL               : 44
DOTSUB               : 43
ELSE                 : 62
EQ                   : 46
EYE                  : 30
FLOATNUM             : 22
FOR                  : 66
GE                   : 51
ID                   : 24 29 66
IF                   : 61 62
INTNUM               : 21 34 35
LE                   : 50
MULASSIGN            : 12
NEQ                  : 47
ONES                 : 32
PRINT                : 70
RETURN               : 67
STRING               : 23
SUBASSIGN            : 11
WHILE                : 65
ZEROS                : 31
[                    : 29 33
]                    : 29 33
error                : 
{                    : 2 5 64
}                    : 2 5 64

Nonterminals, with rules where they appear

assignment           : 6
assignment_op        : 8
bin_op               : 18
break_instr          : 58
conditional_instructions : 61 62 62 65 66
conditional_statement : 54
constant             : 15 28
continue_instr       : 59
expression           : 8 20 38 38 39 39 40 40 41 41 42 42 43 43 44 44 45 45 46 46 47 47 48 48 49 49 50 50 51 51 52 53 66 66 67 71 72
flow_control         : 7
for_loop             : 56
instructions_to_print : 70 71
int_sequence         : 29 30 31 32 34
logic_op             : 19 61 62 65
matrix               : 16 27
matrix_access        : 25
matrix_row           : 33 36
print_instr          : 60
program              : 0
return_instr         : 57
statement            : 3 4 63
statements           : 1 2 3 5 5 64
un_op                : 17
value                : 36 37
variable             : 8 14 26
while_loop           : 55

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statements
    (2) statements -> . { statements }
    (3) statements -> . statements statement
    (4) statements -> . statement
    (5) statements -> . statements { statements }
    (6) statement -> . assignment
    (7) statement -> . flow_control
    (8) assignment -> . variable assignment_op expression ;
    (54) flow_control -> . conditional_statement
    (55) flow_control -> . while_loop
    (56) flow_control -> . for_loop
    (57) flow_control -> . return_instr
    (58) flow_control -> . break_instr
    (59) flow_control -> . continue_instr
    (60) flow_control -> . print_instr
    (24) variable -> . ID
    (25) variable -> . matrix_access
    (61) conditional_statement -> . IF ( logic_op ) conditional_instructions
    (62) conditional_statement -> . IF ( logic_op ) conditional_instructions ELSE conditional_instructions
    (65) while_loop -> . WHILE ( logic_op ) conditional_instructions
    (66) for_loop -> . FOR ID = expression : expression conditional_instructions
    (67) return_instr -> . RETURN expression ;
    (69) break_instr -> . BREAK ;
    (68) continue_instr -> . CONTINUE ;
    (70) print_instr -> . PRINT instructions_to_print ;
    (29) matrix_access -> . ID [ int_sequence ]

    {               shift and go to state 3
    ID              shift and go to state 15
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    RETURN          shift and go to state 20
    BREAK           shift and go to state 21
    CONTINUE        shift and go to state 22
    PRINT           shift and go to state 23

    program                        shift and go to state 1
    statements                     shift and go to state 2
    statement                      shift and go to state 4
    assignment                     shift and go to state 5
    flow_control                   shift and go to state 6
    variable                       shift and go to state 7
    conditional_statement          shift and go to state 8
    while_loop                     shift and go to state 9
    for_loop                       shift and go to state 10
    return_instr                   shift and go to state 11
    break_instr                    shift and go to state 12
    continue_instr                 shift and go to state 13
    print_instr                    shift and go to state 14
    matrix_access                  shift and go to state 16

state 1

    (0) S' -> program .



state 2

    (1) program -> statements .
    (3) statements -> statements . statement
    (5) statements -> statements . { statements }
    (6) statement -> . assignment
    (7) statement -> . flow_control
    (8) assignment -> . variable assignment_op expression ;
    (54) flow_control -> . conditional_statement
    (55) flow_control -> . while_loop
    (56) flow_control -> . for_loop
    (57) flow_control -> . return_instr
    (58) flow_control -> . break_instr
    (59) flow_control -> . continue_instr
    (60) flow_control -> . print_instr
    (24) variable -> . ID
    (25) variable -> . matrix_access
    (61) conditional_statement -> . IF ( logic_op ) conditional_instructions
    (62) conditional_statement -> . IF ( logic_op ) conditional_instructions ELSE conditional_instructions
    (65) while_loop -> . WHILE ( logic_op ) conditional_instructions
    (66) for_loop -> . FOR ID = expression : expression conditional_instructions
    (67) return_instr -> . RETURN expression ;
    (69) break_instr -> . BREAK ;
    (68) continue_instr -> . CONTINUE ;
    (70) print_instr -> . PRINT instructions_to_print ;
    (29) matrix_access -> . ID [ int_sequence ]

    $end            reduce using rule 1 (program -> statements .)
    {               shift and go to state 25
    ID              shift and go to state 15
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    RETURN          shift and go to state 20
    BREAK           shift and go to state 21
    CONTINUE        shift and go to state 22
    PRINT           shift and go to state 23

    statement                      shift and go to state 24
    assignment                     shift and go to state 5
    flow_control                   shift and go to state 6
    variable                       shift and go to state 7
    conditional_statement          shift and go to state 8
    while_loop                     shift and go to state 9
    for_loop                       shift and go to state 10
    return_instr                   shift and go to state 11
    break_instr                    shift and go to state 12
    continue_instr                 shift and go to state 13
    print_instr                    shift and go to state 14
    matrix_access                  shift and go to state 16

state 3

    (2) statements -> { . statements }
    (2) statements -> . { statements }
    (3) statements -> . statements statement
    (4) statements -> . statement
    (5) statements -> . statements { statements }
    (6) statement -> . assignment
    (7) statement -> . flow_control
    (8) assignment -> . variable assignment_op expression ;
    (54) flow_control -> . conditional_statement
    (55) flow_control -> . while_loop
    (56) flow_control -> . for_loop
    (57) flow_control -> . return_instr
    (58) flow_control -> . break_instr
    (59) flow_control -> . continue_instr
    (60) flow_control -> . print_instr
    (24) variable -> . ID
    (25) variable -> . matrix_access
    (61) conditional_statement -> . IF ( logic_op ) conditional_instructions
    (62) conditional_statement -> . IF ( logic_op ) conditional_instructions ELSE conditional_instructions
    (65) while_loop -> . WHILE ( logic_op ) conditional_instructions
    (66) for_loop -> . FOR ID = expression : expression conditional_instructions
    (67) return_instr -> . RETURN expression ;
    (69) break_instr -> . BREAK ;
    (68) continue_instr -> . CONTINUE ;
    (70) print_instr -> . PRINT instructions_to_print ;
    (29) matrix_access -> . ID [ int_sequence ]

    {               shift and go to state 3
    ID              shift and go to state 15
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    RETURN          shift and go to state 20
    BREAK           shift and go to state 21
    CONTINUE        shift and go to state 22
    PRINT           shift and go to state 23

    statements                     shift and go to state 26
    statement                      shift and go to state 4
    assignment                     shift and go to state 5
    flow_control                   shift and go to state 6
    variable                       shift and go to state 7
    conditional_statement          shift and go to state 8
    while_loop                     shift and go to state 9
    for_loop                       shift and go to state 10
    return_instr                   shift and go to state 11
    break_instr                    shift and go to state 12
    continue_instr                 shift and go to state 13
    print_instr                    shift and go to state 14
    matrix_access                  shift and go to state 16

state 4

    (4) statements -> statement .

    {               reduce using rule 4 (statements -> statement .)
    ID              reduce using rule 4 (statements -> statement .)
    IF              reduce using rule 4 (statements -> statement .)
    WHILE           reduce using rule 4 (statements -> statement .)
    FOR             reduce using rule 4 (statements -> statement .)
    RETURN          reduce using rule 4 (statements -> statement .)
    BREAK           reduce using rule 4 (statements -> statement .)
    CONTINUE        reduce using rule 4 (statements -> statement .)
    PRINT           reduce using rule 4 (statements -> statement .)
    $end            reduce using rule 4 (statements -> statement .)
    }               reduce using rule 4 (statements -> statement .)


state 5

    (6) statement -> assignment .

    {               reduce using rule 6 (statement -> assignment .)
    ID              reduce using rule 6 (statement -> assignment .)
    IF              reduce using rule 6 (statement -> assignment .)
    WHILE           reduce using rule 6 (statement -> assignment .)
    FOR             reduce using rule 6 (statement -> assignment .)
    RETURN          reduce using rule 6 (statement -> assignment .)
    BREAK           reduce using rule 6 (statement -> assignment .)
    CONTINUE        reduce using rule 6 (statement -> assignment .)
    PRINT           reduce using rule 6 (statement -> assignment .)
    $end            reduce using rule 6 (statement -> assignment .)
    }               reduce using rule 6 (statement -> assignment .)
    ELSE            reduce using rule 6 (statement -> assignment .)


state 6

    (7) statement -> flow_control .

    {               reduce using rule 7 (statement -> flow_control .)
    ID              reduce using rule 7 (statement -> flow_control .)
    IF              reduce using rule 7 (statement -> flow_control .)
    WHILE           reduce using rule 7 (statement -> flow_control .)
    FOR             reduce using rule 7 (statement -> flow_control .)
    RETURN          reduce using rule 7 (statement -> flow_control .)
    BREAK           reduce using rule 7 (statement -> flow_control .)
    CONTINUE        reduce using rule 7 (statement -> flow_control .)
    PRINT           reduce using rule 7 (statement -> flow_control .)
    $end            reduce using rule 7 (statement -> flow_control .)
    }               reduce using rule 7 (statement -> flow_control .)
    ELSE            reduce using rule 7 (statement -> flow_control .)


state 7

    (8) assignment -> variable . assignment_op expression ;
    (9) assignment_op -> . =
    (10) assignment_op -> . ADDASSIGN
    (11) assignment_op -> . SUBASSIGN
    (12) assignment_op -> . MULASSIGN
    (13) assignment_op -> . DIVASSIGN

    =               shift and go to state 28
    ADDASSIGN       shift and go to state 29
    SUBASSIGN       shift and go to state 30
    MULASSIGN       shift and go to state 31
    DIVASSIGN       shift and go to state 32

    assignment_op                  shift and go to state 27

state 8

    (54) flow_control -> conditional_statement .

    {               reduce using rule 54 (flow_control -> conditional_statement .)
    ID              reduce using rule 54 (flow_control -> conditional_statement .)
    IF              reduce using rule 54 (flow_control -> conditional_statement .)
    WHILE           reduce using rule 54 (flow_control -> conditional_statement .)
    FOR             reduce using rule 54 (flow_control -> conditional_statement .)
    RETURN          reduce using rule 54 (flow_control -> conditional_statement .)
    BREAK           reduce using rule 54 (flow_control -> conditional_statement .)
    CONTINUE        reduce using rule 54 (flow_control -> conditional_statement .)
    PRINT           reduce using rule 54 (flow_control -> conditional_statement .)
    $end            reduce using rule 54 (flow_control -> conditional_statement .)
    }               reduce using rule 54 (flow_control -> conditional_statement .)
    ELSE            reduce using rule 54 (flow_control -> conditional_statement .)


state 9

    (55) flow_control -> while_loop .

    {               reduce using rule 55 (flow_control -> while_loop .)
    ID              reduce using rule 55 (flow_control -> while_loop .)
    IF              reduce using rule 55 (flow_control -> while_loop .)
    WHILE           reduce using rule 55 (flow_control -> while_loop .)
    FOR             reduce using rule 55 (flow_control -> while_loop .)
    RETURN          reduce using rule 55 (flow_control -> while_loop .)
    BREAK           reduce using rule 55 (flow_control -> while_loop .)
    CONTINUE        reduce using rule 55 (flow_control -> while_loop .)
    PRINT           reduce using rule 55 (flow_control -> while_loop .)
    $end            reduce using rule 55 (flow_control -> while_loop .)
    }               reduce using rule 55 (flow_control -> while_loop .)
    ELSE            reduce using rule 55 (flow_control -> while_loop .)


state 10

    (56) flow_control -> for_loop .

    {               reduce using rule 56 (flow_control -> for_loop .)
    ID              reduce using rule 56 (flow_control -> for_loop .)
    IF              reduce using rule 56 (flow_control -> for_loop .)
    WHILE           reduce using rule 56 (flow_control -> for_loop .)
    FOR             reduce using rule 56 (flow_control -> for_loop .)
    RETURN          reduce using rule 56 (flow_control -> for_loop .)
    BREAK           reduce using rule 56 (flow_control -> for_loop .)
    CONTINUE        reduce using rule 56 (flow_control -> for_loop .)
    PRINT           reduce using rule 56 (flow_control -> for_loop .)
    $end            reduce using rule 56 (flow_control -> for_loop .)
    }               reduce using rule 56 (flow_control -> for_loop .)
    ELSE            reduce using rule 56 (flow_control -> for_loop .)


state 11

    (57) flow_control -> return_instr .

    {               reduce using rule 57 (flow_control -> return_instr .)
    ID              reduce using rule 57 (flow_control -> return_instr .)
    IF              reduce using rule 57 (flow_control -> return_instr .)
    WHILE           reduce using rule 57 (flow_control -> return_instr .)
    FOR             reduce using rule 57 (flow_control -> return_instr .)
    RETURN          reduce using rule 57 (flow_control -> return_instr .)
    BREAK           reduce using rule 57 (flow_control -> return_instr .)
    CONTINUE        reduce using rule 57 (flow_control -> return_instr .)
    PRINT           reduce using rule 57 (flow_control -> return_instr .)
    $end            reduce using rule 57 (flow_control -> return_instr .)
    }               reduce using rule 57 (flow_control -> return_instr .)
    ELSE            reduce using rule 57 (flow_control -> return_instr .)


state 12

    (58) flow_control -> break_instr .

    {               reduce using rule 58 (flow_control -> break_instr .)
    ID              reduce using rule 58 (flow_control -> break_instr .)
    IF              reduce using rule 58 (flow_control -> break_instr .)
    WHILE           reduce using rule 58 (flow_control -> break_instr .)
    FOR             reduce using rule 58 (flow_control -> break_instr .)
    RETURN          reduce using rule 58 (flow_control -> break_instr .)
    BREAK           reduce using rule 58 (flow_control -> break_instr .)
    CONTINUE        reduce using rule 58 (flow_control -> break_instr .)
    PRINT           reduce using rule 58 (flow_control -> break_instr .)
    $end            reduce using rule 58 (flow_control -> break_instr .)
    }               reduce using rule 58 (flow_control -> break_instr .)
    ELSE            reduce using rule 58 (flow_control -> break_instr .)


state 13

    (59) flow_control -> continue_instr .

    {               reduce using rule 59 (flow_control -> continue_instr .)
    ID              reduce using rule 59 (flow_control -> continue_instr .)
    IF              reduce using rule 59 (flow_control -> continue_instr .)
    WHILE           reduce using rule 59 (flow_control -> continue_instr .)
    FOR             reduce using rule 59 (flow_control -> continue_instr .)
    RETURN          reduce using rule 59 (flow_control -> continue_instr .)
    BREAK           reduce using rule 59 (flow_control -> continue_instr .)
    CONTINUE        reduce using rule 59 (flow_control -> continue_instr .)
    PRINT           reduce using rule 59 (flow_control -> continue_instr .)
    $end            reduce using rule 59 (flow_control -> continue_instr .)
    }               reduce using rule 59 (flow_control -> continue_instr .)
    ELSE            reduce using rule 59 (flow_control -> continue_instr .)


state 14

    (60) flow_control -> print_instr .

    {               reduce using rule 60 (flow_control -> print_instr .)
    ID              reduce using rule 60 (flow_control -> print_instr .)
    IF              reduce using rule 60 (flow_control -> print_instr .)
    WHILE           reduce using rule 60 (flow_control -> print_instr .)
    FOR             reduce using rule 60 (flow_control -> print_instr .)
    RETURN          reduce using rule 60 (flow_control -> print_instr .)
    BREAK           reduce using rule 60 (flow_control -> print_instr .)
    CONTINUE        reduce using rule 60 (flow_control -> print_instr .)
    PRINT           reduce using rule 60 (flow_control -> print_instr .)
    $end            reduce using rule 60 (flow_control -> print_instr .)
    }               reduce using rule 60 (flow_control -> print_instr .)
    ELSE            reduce using rule 60 (flow_control -> print_instr .)


state 15

    (24) variable -> ID .
    (29) matrix_access -> ID . [ int_sequence ]

    =               reduce using rule 24 (variable -> ID .)
    ADDASSIGN       reduce using rule 24 (variable -> ID .)
    SUBASSIGN       reduce using rule 24 (variable -> ID .)
    MULASSIGN       reduce using rule 24 (variable -> ID .)
    DIVASSIGN       reduce using rule 24 (variable -> ID .)
    ;               reduce using rule 24 (variable -> ID .)
    '               reduce using rule 24 (variable -> ID .)
    +               reduce using rule 24 (variable -> ID .)
    *               reduce using rule 24 (variable -> ID .)
    -               reduce using rule 24 (variable -> ID .)
    /               reduce using rule 24 (variable -> ID .)
    DOTADD          reduce using rule 24 (variable -> ID .)
    DOTSUB          reduce using rule 24 (variable -> ID .)
    DOTMUL          reduce using rule 24 (variable -> ID .)
    DOTDIV          reduce using rule 24 (variable -> ID .)
    EQ              reduce using rule 24 (variable -> ID .)
    NEQ             reduce using rule 24 (variable -> ID .)
    >               reduce using rule 24 (variable -> ID .)
    <               reduce using rule 24 (variable -> ID .)
    LE              reduce using rule 24 (variable -> ID .)
    GE              reduce using rule 24 (variable -> ID .)
    ,               reduce using rule 24 (variable -> ID .)
    )               reduce using rule 24 (variable -> ID .)
    ]               reduce using rule 24 (variable -> ID .)
    :               reduce using rule 24 (variable -> ID .)
    {               reduce using rule 24 (variable -> ID .)
    ID              reduce using rule 24 (variable -> ID .)
    IF              reduce using rule 24 (variable -> ID .)
    WHILE           reduce using rule 24 (variable -> ID .)
    FOR             reduce using rule 24 (variable -> ID .)
    RETURN          reduce using rule 24 (variable -> ID .)
    BREAK           reduce using rule 24 (variable -> ID .)
    CONTINUE        reduce using rule 24 (variable -> ID .)
    PRINT           reduce using rule 24 (variable -> ID .)
    [               shift and go to state 33


state 16

    (25) variable -> matrix_access .

    =               reduce using rule 25 (variable -> matrix_access .)
    ADDASSIGN       reduce using rule 25 (variable -> matrix_access .)
    SUBASSIGN       reduce using rule 25 (variable -> matrix_access .)
    MULASSIGN       reduce using rule 25 (variable -> matrix_access .)
    DIVASSIGN       reduce using rule 25 (variable -> matrix_access .)
    ;               reduce using rule 25 (variable -> matrix_access .)
    '               reduce using rule 25 (variable -> matrix_access .)
    +               reduce using rule 25 (variable -> matrix_access .)
    *               reduce using rule 25 (variable -> matrix_access .)
    -               reduce using rule 25 (variable -> matrix_access .)
    /               reduce using rule 25 (variable -> matrix_access .)
    DOTADD          reduce using rule 25 (variable -> matrix_access .)
    DOTSUB          reduce using rule 25 (variable -> matrix_access .)
    DOTMUL          reduce using rule 25 (variable -> matrix_access .)
    DOTDIV          reduce using rule 25 (variable -> matrix_access .)
    EQ              reduce using rule 25 (variable -> matrix_access .)
    NEQ             reduce using rule 25 (variable -> matrix_access .)
    >               reduce using rule 25 (variable -> matrix_access .)
    <               reduce using rule 25 (variable -> matrix_access .)
    LE              reduce using rule 25 (variable -> matrix_access .)
    GE              reduce using rule 25 (variable -> matrix_access .)
    ,               reduce using rule 25 (variable -> matrix_access .)
    )               reduce using rule 25 (variable -> matrix_access .)
    ]               reduce using rule 25 (variable -> matrix_access .)
    :               reduce using rule 25 (variable -> matrix_access .)
    {               reduce using rule 25 (variable -> matrix_access .)
    ID              reduce using rule 25 (variable -> matrix_access .)
    IF              reduce using rule 25 (variable -> matrix_access .)
    WHILE           reduce using rule 25 (variable -> matrix_access .)
    FOR             reduce using rule 25 (variable -> matrix_access .)
    RETURN          reduce using rule 25 (variable -> matrix_access .)
    BREAK           reduce using rule 25 (variable -> matrix_access .)
    CONTINUE        reduce using rule 25 (variable -> matrix_access .)
    PRINT           reduce using rule 25 (variable -> matrix_access .)


state 17

    (61) conditional_statement -> IF . ( logic_op ) conditional_instructions
    (62) conditional_statement -> IF . ( logic_op ) conditional_instructions ELSE conditional_instructions

    (               shift and go to state 34


state 18

    (65) while_loop -> WHILE . ( logic_op ) conditional_instructions

    (               shift and go to state 35


state 19

    (66) for_loop -> FOR . ID = expression : expression conditional_instructions

    ID              shift and go to state 36


state 20

    (67) return_instr -> RETURN . expression ;
    (14) expression -> . variable
    (15) expression -> . constant
    (16) expression -> . matrix
    (17) expression -> . un_op
    (18) expression -> . bin_op
    (19) expression -> . logic_op
    (20) expression -> . ( expression )
    (24) variable -> . ID
    (25) variable -> . matrix_access
    (21) constant -> . INTNUM
    (22) constant -> . FLOATNUM
    (23) constant -> . STRING
    (30) matrix -> . EYE ( int_sequence )
    (31) matrix -> . ZEROS ( int_sequence )
    (32) matrix -> . ONES ( int_sequence )
    (33) matrix -> . [ matrix_row ]
    (52) un_op -> . expression '
    (53) un_op -> . - expression
    (38) bin_op -> . expression + expression
    (39) bin_op -> . expression * expression
    (40) bin_op -> . expression - expression
    (41) bin_op -> . expression / expression
    (42) bin_op -> . expression DOTADD expression
    (43) bin_op -> . expression DOTSUB expression
    (44) bin_op -> . expression DOTMUL expression
    (45) bin_op -> . expression DOTDIV expression
    (46) logic_op -> . expression EQ expression
    (47) logic_op -> . expression NEQ expression
    (48) logic_op -> . expression > expression
    (49) logic_op -> . expression < expression
    (50) logic_op -> . expression LE expression
    (51) logic_op -> . expression GE expression
    (29) matrix_access -> . ID [ int_sequence ]

    (               shift and go to state 44
    ID              shift and go to state 15
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STRING          shift and go to state 47
    EYE             shift and go to state 48
    ZEROS           shift and go to state 49
    ONES            shift and go to state 50
    [               shift and go to state 51
    -               shift and go to state 52

    expression                     shift and go to state 37
    variable                       shift and go to state 38
    constant                       shift and go to state 39
    matrix                         shift and go to state 40
    un_op                          shift and go to state 41
    bin_op                         shift and go to state 42
    logic_op                       shift and go to state 43
    matrix_access                  shift and go to state 16

state 21

    (69) break_instr -> BREAK . ;

    ;               shift and go to state 53


state 22

    (68) continue_instr -> CONTINUE . ;

    ;               shift and go to state 54


state 23

    (70) print_instr -> PRINT . instructions_to_print ;
    (71) instructions_to_print -> . instructions_to_print , expression
    (72) instructions_to_print -> . expression
    (14) expression -> . variable
    (15) expression -> . constant
    (16) expression -> . matrix
    (17) expression -> . un_op
    (18) expression -> . bin_op
    (19) expression -> . logic_op
    (20) expression -> . ( expression )
    (24) variable -> . ID
    (25) variable -> . matrix_access
    (21) constant -> . INTNUM
    (22) constant -> . FLOATNUM
    (23) constant -> . STRING
    (30) matrix -> . EYE ( int_sequence )
    (31) matrix -> . ZEROS ( int_sequence )
    (32) matrix -> . ONES ( int_sequence )
    (33) matrix -> . [ matrix_row ]
    (52) un_op -> . expression '
    (53) un_op -> . - expression
    (38) bin_op -> . expression + expression
    (39) bin_op -> . expression * expression
    (40) bin_op -> . expression - expression
    (41) bin_op -> . expression / expression
    (42) bin_op -> . expression DOTADD expression
    (43) bin_op -> . expression DOTSUB expression
    (44) bin_op -> . expression DOTMUL expression
    (45) bin_op -> . expression DOTDIV expression
    (46) logic_op -> . expression EQ expression
    (47) logic_op -> . expression NEQ expression
    (48) logic_op -> . expression > expression
    (49) logic_op -> . expression < expression
    (50) logic_op -> . expression LE expression
    (51) logic_op -> . expression GE expression
    (29) matrix_access -> . ID [ int_sequence ]

    (               shift and go to state 44
    ID              shift and go to state 15
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STRING          shift and go to state 47
    EYE             shift and go to state 48
    ZEROS           shift and go to state 49
    ONES            shift and go to state 50
    [               shift and go to state 51
    -               shift and go to state 52

    instructions_to_print          shift and go to state 55
    expression                     shift and go to state 56
    variable                       shift and go to state 38
    constant                       shift and go to state 39
    matrix                         shift and go to state 40
    un_op                          shift and go to state 41
    bin_op                         shift and go to state 42
    logic_op                       shift and go to state 43
    matrix_access                  shift and go to state 16

state 24

    (3) statements -> statements statement .

    {               reduce using rule 3 (statements -> statements statement .)
    ID              reduce using rule 3 (statements -> statements statement .)
    IF              reduce using rule 3 (statements -> statements statement .)
    WHILE           reduce using rule 3 (statements -> statements statement .)
    FOR             reduce using rule 3 (statements -> statements statement .)
    RETURN          reduce using rule 3 (statements -> statements statement .)
    BREAK           reduce using rule 3 (statements -> statements statement .)
    CONTINUE        reduce using rule 3 (statements -> statements statement .)
    PRINT           reduce using rule 3 (statements -> statements statement .)
    $end            reduce using rule 3 (statements -> statements statement .)
    }               reduce using rule 3 (statements -> statements statement .)


state 25

    (5) statements -> statements { . statements }
    (2) statements -> . { statements }
    (3) statements -> . statements statement
    (4) statements -> . statement
    (5) statements -> . statements { statements }
    (6) statement -> . assignment
    (7) statement -> . flow_control
    (8) assignment -> . variable assignment_op expression ;
    (54) flow_control -> . conditional_statement
    (55) flow_control -> . while_loop
    (56) flow_control -> . for_loop
    (57) flow_control -> . return_instr
    (58) flow_control -> . break_instr
    (59) flow_control -> . continue_instr
    (60) flow_control -> . print_instr
    (24) variable -> . ID
    (25) variable -> . matrix_access
    (61) conditional_statement -> . IF ( logic_op ) conditional_instructions
    (62) conditional_statement -> . IF ( logic_op ) conditional_instructions ELSE conditional_instructions
    (65) while_loop -> . WHILE ( logic_op ) conditional_instructions
    (66) for_loop -> . FOR ID = expression : expression conditional_instructions
    (67) return_instr -> . RETURN expression ;
    (69) break_instr -> . BREAK ;
    (68) continue_instr -> . CONTINUE ;
    (70) print_instr -> . PRINT instructions_to_print ;
    (29) matrix_access -> . ID [ int_sequence ]

    {               shift and go to state 3
    ID              shift and go to state 15
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    RETURN          shift and go to state 20
    BREAK           shift and go to state 21
    CONTINUE        shift and go to state 22
    PRINT           shift and go to state 23

    statements                     shift and go to state 57
    statement                      shift and go to state 4
    assignment                     shift and go to state 5
    flow_control                   shift and go to state 6
    variable                       shift and go to state 7
    conditional_statement          shift and go to state 8
    while_loop                     shift and go to state 9
    for_loop                       shift and go to state 10
    return_instr                   shift and go to state 11
    break_instr                    shift and go to state 12
    continue_instr                 shift and go to state 13
    print_instr                    shift and go to state 14
    matrix_access                  shift and go to state 16

state 26

    (2) statements -> { statements . }
    (3) statements -> statements . statement
    (5) statements -> statements . { statements }
    (6) statement -> . assignment
    (7) statement -> . flow_control
    (8) assignment -> . variable assignment_op expression ;
    (54) flow_control -> . conditional_statement
    (55) flow_control -> . while_loop
    (56) flow_control -> . for_loop
    (57) flow_control -> . return_instr
    (58) flow_control -> . break_instr
    (59) flow_control -> . continue_instr
    (60) flow_control -> . print_instr
    (24) variable -> . ID
    (25) variable -> . matrix_access
    (61) conditional_statement -> . IF ( logic_op ) conditional_instructions
    (62) conditional_statement -> . IF ( logic_op ) conditional_instructions ELSE conditional_instructions
    (65) while_loop -> . WHILE ( logic_op ) conditional_instructions
    (66) for_loop -> . FOR ID = expression : expression conditional_instructions
    (67) return_instr -> . RETURN expression ;
    (69) break_instr -> . BREAK ;
    (68) continue_instr -> . CONTINUE ;
    (70) print_instr -> . PRINT instructions_to_print ;
    (29) matrix_access -> . ID [ int_sequence ]

    }               shift and go to state 58
    {               shift and go to state 25
    ID              shift and go to state 15
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    RETURN          shift and go to state 20
    BREAK           shift and go to state 21
    CONTINUE        shift and go to state 22
    PRINT           shift and go to state 23

    statement                      shift and go to state 24
    assignment                     shift and go to state 5
    flow_control                   shift and go to state 6
    variable                       shift and go to state 7
    conditional_statement          shift and go to state 8
    while_loop                     shift and go to state 9
    for_loop                       shift and go to state 10
    return_instr                   shift and go to state 11
    break_instr                    shift and go to state 12
    continue_instr                 shift and go to state 13
    print_instr                    shift and go to state 14
    matrix_access                  shift and go to state 16

state 27

    (8) assignment -> variable assignment_op . expression ;
    (14) expression -> . variable
    (15) expression -> . constant
    (16) expression -> . matrix
    (17) expression -> . un_op
    (18) expression -> . bin_op
    (19) expression -> . logic_op
    (20) expression -> . ( expression )
    (24) variable -> . ID
    (25) variable -> . matrix_access
    (21) constant -> . INTNUM
    (22) constant -> . FLOATNUM
    (23) constant -> . STRING
    (30) matrix -> . EYE ( int_sequence )
    (31) matrix -> . ZEROS ( int_sequence )
    (32) matrix -> . ONES ( int_sequence )
    (33) matrix -> . [ matrix_row ]
    (52) un_op -> . expression '
    (53) un_op -> . - expression
    (38) bin_op -> . expression + expression
    (39) bin_op -> . expression * expression
    (40) bin_op -> . expression - expression
    (41) bin_op -> . expression / expression
    (42) bin_op -> . expression DOTADD expression
    (43) bin_op -> . expression DOTSUB expression
    (44) bin_op -> . expression DOTMUL expression
    (45) bin_op -> . expression DOTDIV expression
    (46) logic_op -> . expression EQ expression
    (47) logic_op -> . expression NEQ expression
    (48) logic_op -> . expression > expression
    (49) logic_op -> . expression < expression
    (50) logic_op -> . expression LE expression
    (51) logic_op -> . expression GE expression
    (29) matrix_access -> . ID [ int_sequence ]

    (               shift and go to state 44
    ID              shift and go to state 15
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STRING          shift and go to state 47
    EYE             shift and go to state 48
    ZEROS           shift and go to state 49
    ONES            shift and go to state 50
    [               shift and go to state 51
    -               shift and go to state 52

    variable                       shift and go to state 38
    expression                     shift and go to state 59
    constant                       shift and go to state 39
    matrix                         shift and go to state 40
    un_op                          shift and go to state 41
    bin_op                         shift and go to state 42
    logic_op                       shift and go to state 43
    matrix_access                  shift and go to state 16

state 28

    (9) assignment_op -> = .

    (               reduce using rule 9 (assignment_op -> = .)
    ID              reduce using rule 9 (assignment_op -> = .)
    INTNUM          reduce using rule 9 (assignment_op -> = .)
    FLOATNUM        reduce using rule 9 (assignment_op -> = .)
    STRING          reduce using rule 9 (assignment_op -> = .)
    EYE             reduce using rule 9 (assignment_op -> = .)
    ZEROS           reduce using rule 9 (assignment_op -> = .)
    ONES            reduce using rule 9 (assignment_op -> = .)
    [               reduce using rule 9 (assignment_op -> = .)
    -               reduce using rule 9 (assignment_op -> = .)


state 29

    (10) assignment_op -> ADDASSIGN .

    (               reduce using rule 10 (assignment_op -> ADDASSIGN .)
    ID              reduce using rule 10 (assignment_op -> ADDASSIGN .)
    INTNUM          reduce using rule 10 (assignment_op -> ADDASSIGN .)
    FLOATNUM        reduce using rule 10 (assignment_op -> ADDASSIGN .)
    STRING          reduce using rule 10 (assignment_op -> ADDASSIGN .)
    EYE             reduce using rule 10 (assignment_op -> ADDASSIGN .)
    ZEROS           reduce using rule 10 (assignment_op -> ADDASSIGN .)
    ONES            reduce using rule 10 (assignment_op -> ADDASSIGN .)
    [               reduce using rule 10 (assignment_op -> ADDASSIGN .)
    -               reduce using rule 10 (assignment_op -> ADDASSIGN .)


state 30

    (11) assignment_op -> SUBASSIGN .

    (               reduce using rule 11 (assignment_op -> SUBASSIGN .)
    ID              reduce using rule 11 (assignment_op -> SUBASSIGN .)
    INTNUM          reduce using rule 11 (assignment_op -> SUBASSIGN .)
    FLOATNUM        reduce using rule 11 (assignment_op -> SUBASSIGN .)
    STRING          reduce using rule 11 (assignment_op -> SUBASSIGN .)
    EYE             reduce using rule 11 (assignment_op -> SUBASSIGN .)
    ZEROS           reduce using rule 11 (assignment_op -> SUBASSIGN .)
    ONES            reduce using rule 11 (assignment_op -> SUBASSIGN .)
    [               reduce using rule 11 (assignment_op -> SUBASSIGN .)
    -               reduce using rule 11 (assignment_op -> SUBASSIGN .)


state 31

    (12) assignment_op -> MULASSIGN .

    (               reduce using rule 12 (assignment_op -> MULASSIGN .)
    ID              reduce using rule 12 (assignment_op -> MULASSIGN .)
    INTNUM          reduce using rule 12 (assignment_op -> MULASSIGN .)
    FLOATNUM        reduce using rule 12 (assignment_op -> MULASSIGN .)
    STRING          reduce using rule 12 (assignment_op -> MULASSIGN .)
    EYE             reduce using rule 12 (assignment_op -> MULASSIGN .)
    ZEROS           reduce using rule 12 (assignment_op -> MULASSIGN .)
    ONES            reduce using rule 12 (assignment_op -> MULASSIGN .)
    [               reduce using rule 12 (assignment_op -> MULASSIGN .)
    -               reduce using rule 12 (assignment_op -> MULASSIGN .)


state 32

    (13) assignment_op -> DIVASSIGN .

    (               reduce using rule 13 (assignment_op -> DIVASSIGN .)
    ID              reduce using rule 13 (assignment_op -> DIVASSIGN .)
    INTNUM          reduce using rule 13 (assignment_op -> DIVASSIGN .)
    FLOATNUM        reduce using rule 13 (assignment_op -> DIVASSIGN .)
    STRING          reduce using rule 13 (assignment_op -> DIVASSIGN .)
    EYE             reduce using rule 13 (assignment_op -> DIVASSIGN .)
    ZEROS           reduce using rule 13 (assignment_op -> DIVASSIGN .)
    ONES            reduce using rule 13 (assignment_op -> DIVASSIGN .)
    [               reduce using rule 13 (assignment_op -> DIVASSIGN .)
    -               reduce using rule 13 (assignment_op -> DIVASSIGN .)


state 33

    (29) matrix_access -> ID [ . int_sequence ]
    (34) int_sequence -> . int_sequence , INTNUM
    (35) int_sequence -> . INTNUM

    INTNUM          shift and go to state 61

    int_sequence                   shift and go to state 60

state 34

    (61) conditional_statement -> IF ( . logic_op ) conditional_instructions
    (62) conditional_statement -> IF ( . logic_op ) conditional_instructions ELSE conditional_instructions
    (46) logic_op -> . expression EQ expression
    (47) logic_op -> . expression NEQ expression
    (48) logic_op -> . expression > expression
    (49) logic_op -> . expression < expression
    (50) logic_op -> . expression LE expression
    (51) logic_op -> . expression GE expression
    (14) expression -> . variable
    (15) expression -> . constant
    (16) expression -> . matrix
    (17) expression -> . un_op
    (18) expression -> . bin_op
    (19) expression -> . logic_op
    (20) expression -> . ( expression )
    (24) variable -> . ID
    (25) variable -> . matrix_access
    (21) constant -> . INTNUM
    (22) constant -> . FLOATNUM
    (23) constant -> . STRING
    (30) matrix -> . EYE ( int_sequence )
    (31) matrix -> . ZEROS ( int_sequence )
    (32) matrix -> . ONES ( int_sequence )
    (33) matrix -> . [ matrix_row ]
    (52) un_op -> . expression '
    (53) un_op -> . - expression
    (38) bin_op -> . expression + expression
    (39) bin_op -> . expression * expression
    (40) bin_op -> . expression - expression
    (41) bin_op -> . expression / expression
    (42) bin_op -> . expression DOTADD expression
    (43) bin_op -> . expression DOTSUB expression
    (44) bin_op -> . expression DOTMUL expression
    (45) bin_op -> . expression DOTDIV expression
    (29) matrix_access -> . ID [ int_sequence ]

    (               shift and go to state 44
    ID              shift and go to state 15
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STRING          shift and go to state 47
    EYE             shift and go to state 48
    ZEROS           shift and go to state 49
    ONES            shift and go to state 50
    [               shift and go to state 51
    -               shift and go to state 52

    logic_op                       shift and go to state 62
    expression                     shift and go to state 63
    variable                       shift and go to state 38
    constant                       shift and go to state 39
    matrix                         shift and go to state 40
    un_op                          shift and go to state 41
    bin_op                         shift and go to state 42
    matrix_access                  shift and go to state 16

state 35

    (65) while_loop -> WHILE ( . logic_op ) conditional_instructions
    (46) logic_op -> . expression EQ expression
    (47) logic_op -> . expression NEQ expression
    (48) logic_op -> . expression > expression
    (49) logic_op -> . expression < expression
    (50) logic_op -> . expression LE expression
    (51) logic_op -> . expression GE expression
    (14) expression -> . variable
    (15) expression -> . constant
    (16) expression -> . matrix
    (17) expression -> . un_op
    (18) expression -> . bin_op
    (19) expression -> . logic_op
    (20) expression -> . ( expression )
    (24) variable -> . ID
    (25) variable -> . matrix_access
    (21) constant -> . INTNUM
    (22) constant -> . FLOATNUM
    (23) constant -> . STRING
    (30) matrix -> . EYE ( int_sequence )
    (31) matrix -> . ZEROS ( int_sequence )
    (32) matrix -> . ONES ( int_sequence )
    (33) matrix -> . [ matrix_row ]
    (52) un_op -> . expression '
    (53) un_op -> . - expression
    (38) bin_op -> . expression + expression
    (39) bin_op -> . expression * expression
    (40) bin_op -> . expression - expression
    (41) bin_op -> . expression / expression
    (42) bin_op -> . expression DOTADD expression
    (43) bin_op -> . expression DOTSUB expression
    (44) bin_op -> . expression DOTMUL expression
    (45) bin_op -> . expression DOTDIV expression
    (29) matrix_access -> . ID [ int_sequence ]

    (               shift and go to state 44
    ID              shift and go to state 15
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STRING          shift and go to state 47
    EYE             shift and go to state 48
    ZEROS           shift and go to state 49
    ONES            shift and go to state 50
    [               shift and go to state 51
    -               shift and go to state 52

    logic_op                       shift and go to state 64
    expression                     shift and go to state 63
    variable                       shift and go to state 38
    constant                       shift and go to state 39
    matrix                         shift and go to state 40
    un_op                          shift and go to state 41
    bin_op                         shift and go to state 42
    matrix_access                  shift and go to state 16

state 36

    (66) for_loop -> FOR ID . = expression : expression conditional_instructions

    =               shift and go to state 65


state 37

    (67) return_instr -> RETURN expression . ;
    (52) un_op -> expression . '
    (38) bin_op -> expression . + expression
    (39) bin_op -> expression . * expression
    (40) bin_op -> expression . - expression
    (41) bin_op -> expression . / expression
    (42) bin_op -> expression . DOTADD expression
    (43) bin_op -> expression . DOTSUB expression
    (44) bin_op -> expression . DOTMUL expression
    (45) bin_op -> expression . DOTDIV expression
    (46) logic_op -> expression . EQ expression
    (47) logic_op -> expression . NEQ expression
    (48) logic_op -> expression . > expression
    (49) logic_op -> expression . < expression
    (50) logic_op -> expression . LE expression
    (51) logic_op -> expression . GE expression

    ;               shift and go to state 66
    '               shift and go to state 67
    +               shift and go to state 68
    *               shift and go to state 69
    -               shift and go to state 70
    /               shift and go to state 71
    DOTADD          shift and go to state 72
    DOTSUB          shift and go to state 73
    DOTMUL          shift and go to state 74
    DOTDIV          shift and go to state 75
    EQ              shift and go to state 76
    NEQ             shift and go to state 77
    >               shift and go to state 78
    <               shift and go to state 79
    LE              shift and go to state 80
    GE              shift and go to state 81


state 38

    (14) expression -> variable .

    ;               reduce using rule 14 (expression -> variable .)
    '               reduce using rule 14 (expression -> variable .)
    +               reduce using rule 14 (expression -> variable .)
    *               reduce using rule 14 (expression -> variable .)
    -               reduce using rule 14 (expression -> variable .)
    /               reduce using rule 14 (expression -> variable .)
    DOTADD          reduce using rule 14 (expression -> variable .)
    DOTSUB          reduce using rule 14 (expression -> variable .)
    DOTMUL          reduce using rule 14 (expression -> variable .)
    DOTDIV          reduce using rule 14 (expression -> variable .)
    EQ              reduce using rule 14 (expression -> variable .)
    NEQ             reduce using rule 14 (expression -> variable .)
    >               reduce using rule 14 (expression -> variable .)
    <               reduce using rule 14 (expression -> variable .)
    LE              reduce using rule 14 (expression -> variable .)
    GE              reduce using rule 14 (expression -> variable .)
    ,               reduce using rule 14 (expression -> variable .)
    )               reduce using rule 14 (expression -> variable .)
    :               reduce using rule 14 (expression -> variable .)
    {               reduce using rule 14 (expression -> variable .)
    ID              reduce using rule 14 (expression -> variable .)
    IF              reduce using rule 14 (expression -> variable .)
    WHILE           reduce using rule 14 (expression -> variable .)
    FOR             reduce using rule 14 (expression -> variable .)
    RETURN          reduce using rule 14 (expression -> variable .)
    BREAK           reduce using rule 14 (expression -> variable .)
    CONTINUE        reduce using rule 14 (expression -> variable .)
    PRINT           reduce using rule 14 (expression -> variable .)


state 39

    (15) expression -> constant .

    ;               reduce using rule 15 (expression -> constant .)
    '               reduce using rule 15 (expression -> constant .)
    +               reduce using rule 15 (expression -> constant .)
    *               reduce using rule 15 (expression -> constant .)
    -               reduce using rule 15 (expression -> constant .)
    /               reduce using rule 15 (expression -> constant .)
    DOTADD          reduce using rule 15 (expression -> constant .)
    DOTSUB          reduce using rule 15 (expression -> constant .)
    DOTMUL          reduce using rule 15 (expression -> constant .)
    DOTDIV          reduce using rule 15 (expression -> constant .)
    EQ              reduce using rule 15 (expression -> constant .)
    NEQ             reduce using rule 15 (expression -> constant .)
    >               reduce using rule 15 (expression -> constant .)
    <               reduce using rule 15 (expression -> constant .)
    LE              reduce using rule 15 (expression -> constant .)
    GE              reduce using rule 15 (expression -> constant .)
    ,               reduce using rule 15 (expression -> constant .)
    )               reduce using rule 15 (expression -> constant .)
    :               reduce using rule 15 (expression -> constant .)
    {               reduce using rule 15 (expression -> constant .)
    ID              reduce using rule 15 (expression -> constant .)
    IF              reduce using rule 15 (expression -> constant .)
    WHILE           reduce using rule 15 (expression -> constant .)
    FOR             reduce using rule 15 (expression -> constant .)
    RETURN          reduce using rule 15 (expression -> constant .)
    BREAK           reduce using rule 15 (expression -> constant .)
    CONTINUE        reduce using rule 15 (expression -> constant .)
    PRINT           reduce using rule 15 (expression -> constant .)


state 40

    (16) expression -> matrix .

    ;               reduce using rule 16 (expression -> matrix .)
    '               reduce using rule 16 (expression -> matrix .)
    +               reduce using rule 16 (expression -> matrix .)
    *               reduce using rule 16 (expression -> matrix .)
    -               reduce using rule 16 (expression -> matrix .)
    /               reduce using rule 16 (expression -> matrix .)
    DOTADD          reduce using rule 16 (expression -> matrix .)
    DOTSUB          reduce using rule 16 (expression -> matrix .)
    DOTMUL          reduce using rule 16 (expression -> matrix .)
    DOTDIV          reduce using rule 16 (expression -> matrix .)
    EQ              reduce using rule 16 (expression -> matrix .)
    NEQ             reduce using rule 16 (expression -> matrix .)
    >               reduce using rule 16 (expression -> matrix .)
    <               reduce using rule 16 (expression -> matrix .)
    LE              reduce using rule 16 (expression -> matrix .)
    GE              reduce using rule 16 (expression -> matrix .)
    ,               reduce using rule 16 (expression -> matrix .)
    )               reduce using rule 16 (expression -> matrix .)
    :               reduce using rule 16 (expression -> matrix .)
    {               reduce using rule 16 (expression -> matrix .)
    ID              reduce using rule 16 (expression -> matrix .)
    IF              reduce using rule 16 (expression -> matrix .)
    WHILE           reduce using rule 16 (expression -> matrix .)
    FOR             reduce using rule 16 (expression -> matrix .)
    RETURN          reduce using rule 16 (expression -> matrix .)
    BREAK           reduce using rule 16 (expression -> matrix .)
    CONTINUE        reduce using rule 16 (expression -> matrix .)
    PRINT           reduce using rule 16 (expression -> matrix .)


state 41

    (17) expression -> un_op .

    ;               reduce using rule 17 (expression -> un_op .)
    '               reduce using rule 17 (expression -> un_op .)
    +               reduce using rule 17 (expression -> un_op .)
    *               reduce using rule 17 (expression -> un_op .)
    -               reduce using rule 17 (expression -> un_op .)
    /               reduce using rule 17 (expression -> un_op .)
    DOTADD          reduce using rule 17 (expression -> un_op .)
    DOTSUB          reduce using rule 17 (expression -> un_op .)
    DOTMUL          reduce using rule 17 (expression -> un_op .)
    DOTDIV          reduce using rule 17 (expression -> un_op .)
    EQ              reduce using rule 17 (expression -> un_op .)
    NEQ             reduce using rule 17 (expression -> un_op .)
    >               reduce using rule 17 (expression -> un_op .)
    <               reduce using rule 17 (expression -> un_op .)
    LE              reduce using rule 17 (expression -> un_op .)
    GE              reduce using rule 17 (expression -> un_op .)
    ,               reduce using rule 17 (expression -> un_op .)
    )               reduce using rule 17 (expression -> un_op .)
    :               reduce using rule 17 (expression -> un_op .)
    {               reduce using rule 17 (expression -> un_op .)
    ID              reduce using rule 17 (expression -> un_op .)
    IF              reduce using rule 17 (expression -> un_op .)
    WHILE           reduce using rule 17 (expression -> un_op .)
    FOR             reduce using rule 17 (expression -> un_op .)
    RETURN          reduce using rule 17 (expression -> un_op .)
    BREAK           reduce using rule 17 (expression -> un_op .)
    CONTINUE        reduce using rule 17 (expression -> un_op .)
    PRINT           reduce using rule 17 (expression -> un_op .)


state 42

    (18) expression -> bin_op .

    ;               reduce using rule 18 (expression -> bin_op .)
    '               reduce using rule 18 (expression -> bin_op .)
    +               reduce using rule 18 (expression -> bin_op .)
    *               reduce using rule 18 (expression -> bin_op .)
    -               reduce using rule 18 (expression -> bin_op .)
    /               reduce using rule 18 (expression -> bin_op .)
    DOTADD          reduce using rule 18 (expression -> bin_op .)
    DOTSUB          reduce using rule 18 (expression -> bin_op .)
    DOTMUL          reduce using rule 18 (expression -> bin_op .)
    DOTDIV          reduce using rule 18 (expression -> bin_op .)
    EQ              reduce using rule 18 (expression -> bin_op .)
    NEQ             reduce using rule 18 (expression -> bin_op .)
    >               reduce using rule 18 (expression -> bin_op .)
    <               reduce using rule 18 (expression -> bin_op .)
    LE              reduce using rule 18 (expression -> bin_op .)
    GE              reduce using rule 18 (expression -> bin_op .)
    ,               reduce using rule 18 (expression -> bin_op .)
    )               reduce using rule 18 (expression -> bin_op .)
    :               reduce using rule 18 (expression -> bin_op .)
    {               reduce using rule 18 (expression -> bin_op .)
    ID              reduce using rule 18 (expression -> bin_op .)
    IF              reduce using rule 18 (expression -> bin_op .)
    WHILE           reduce using rule 18 (expression -> bin_op .)
    FOR             reduce using rule 18 (expression -> bin_op .)
    RETURN          reduce using rule 18 (expression -> bin_op .)
    BREAK           reduce using rule 18 (expression -> bin_op .)
    CONTINUE        reduce using rule 18 (expression -> bin_op .)
    PRINT           reduce using rule 18 (expression -> bin_op .)


state 43

    (19) expression -> logic_op .

    ;               reduce using rule 19 (expression -> logic_op .)
    '               reduce using rule 19 (expression -> logic_op .)
    +               reduce using rule 19 (expression -> logic_op .)
    *               reduce using rule 19 (expression -> logic_op .)
    -               reduce using rule 19 (expression -> logic_op .)
    /               reduce using rule 19 (expression -> logic_op .)
    DOTADD          reduce using rule 19 (expression -> logic_op .)
    DOTSUB          reduce using rule 19 (expression -> logic_op .)
    DOTMUL          reduce using rule 19 (expression -> logic_op .)
    DOTDIV          reduce using rule 19 (expression -> logic_op .)
    EQ              reduce using rule 19 (expression -> logic_op .)
    NEQ             reduce using rule 19 (expression -> logic_op .)
    >               reduce using rule 19 (expression -> logic_op .)
    <               reduce using rule 19 (expression -> logic_op .)
    LE              reduce using rule 19 (expression -> logic_op .)
    GE              reduce using rule 19 (expression -> logic_op .)
    ,               reduce using rule 19 (expression -> logic_op .)
    )               reduce using rule 19 (expression -> logic_op .)
    :               reduce using rule 19 (expression -> logic_op .)
    {               reduce using rule 19 (expression -> logic_op .)
    ID              reduce using rule 19 (expression -> logic_op .)
    IF              reduce using rule 19 (expression -> logic_op .)
    WHILE           reduce using rule 19 (expression -> logic_op .)
    FOR             reduce using rule 19 (expression -> logic_op .)
    RETURN          reduce using rule 19 (expression -> logic_op .)
    BREAK           reduce using rule 19 (expression -> logic_op .)
    CONTINUE        reduce using rule 19 (expression -> logic_op .)
    PRINT           reduce using rule 19 (expression -> logic_op .)


state 44

    (20) expression -> ( . expression )
    (14) expression -> . variable
    (15) expression -> . constant
    (16) expression -> . matrix
    (17) expression -> . un_op
    (18) expression -> . bin_op
    (19) expression -> . logic_op
    (20) expression -> . ( expression )
    (24) variable -> . ID
    (25) variable -> . matrix_access
    (21) constant -> . INTNUM
    (22) constant -> . FLOATNUM
    (23) constant -> . STRING
    (30) matrix -> . EYE ( int_sequence )
    (31) matrix -> . ZEROS ( int_sequence )
    (32) matrix -> . ONES ( int_sequence )
    (33) matrix -> . [ matrix_row ]
    (52) un_op -> . expression '
    (53) un_op -> . - expression
    (38) bin_op -> . expression + expression
    (39) bin_op -> . expression * expression
    (40) bin_op -> . expression - expression
    (41) bin_op -> . expression / expression
    (42) bin_op -> . expression DOTADD expression
    (43) bin_op -> . expression DOTSUB expression
    (44) bin_op -> . expression DOTMUL expression
    (45) bin_op -> . expression DOTDIV expression
    (46) logic_op -> . expression EQ expression
    (47) logic_op -> . expression NEQ expression
    (48) logic_op -> . expression > expression
    (49) logic_op -> . expression < expression
    (50) logic_op -> . expression LE expression
    (51) logic_op -> . expression GE expression
    (29) matrix_access -> . ID [ int_sequence ]

    (               shift and go to state 44
    ID              shift and go to state 15
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STRING          shift and go to state 47
    EYE             shift and go to state 48
    ZEROS           shift and go to state 49
    ONES            shift and go to state 50
    [               shift and go to state 51
    -               shift and go to state 52

    expression                     shift and go to state 82
    variable                       shift and go to state 38
    constant                       shift and go to state 39
    matrix                         shift and go to state 40
    un_op                          shift and go to state 41
    bin_op                         shift and go to state 42
    logic_op                       shift and go to state 43
    matrix_access                  shift and go to state 16

state 45

    (21) constant -> INTNUM .

    ;               reduce using rule 21 (constant -> INTNUM .)
    '               reduce using rule 21 (constant -> INTNUM .)
    +               reduce using rule 21 (constant -> INTNUM .)
    *               reduce using rule 21 (constant -> INTNUM .)
    -               reduce using rule 21 (constant -> INTNUM .)
    /               reduce using rule 21 (constant -> INTNUM .)
    DOTADD          reduce using rule 21 (constant -> INTNUM .)
    DOTSUB          reduce using rule 21 (constant -> INTNUM .)
    DOTMUL          reduce using rule 21 (constant -> INTNUM .)
    DOTDIV          reduce using rule 21 (constant -> INTNUM .)
    EQ              reduce using rule 21 (constant -> INTNUM .)
    NEQ             reduce using rule 21 (constant -> INTNUM .)
    >               reduce using rule 21 (constant -> INTNUM .)
    <               reduce using rule 21 (constant -> INTNUM .)
    LE              reduce using rule 21 (constant -> INTNUM .)
    GE              reduce using rule 21 (constant -> INTNUM .)
    ,               reduce using rule 21 (constant -> INTNUM .)
    )               reduce using rule 21 (constant -> INTNUM .)
    ]               reduce using rule 21 (constant -> INTNUM .)
    :               reduce using rule 21 (constant -> INTNUM .)
    {               reduce using rule 21 (constant -> INTNUM .)
    ID              reduce using rule 21 (constant -> INTNUM .)
    IF              reduce using rule 21 (constant -> INTNUM .)
    WHILE           reduce using rule 21 (constant -> INTNUM .)
    FOR             reduce using rule 21 (constant -> INTNUM .)
    RETURN          reduce using rule 21 (constant -> INTNUM .)
    BREAK           reduce using rule 21 (constant -> INTNUM .)
    CONTINUE        reduce using rule 21 (constant -> INTNUM .)
    PRINT           reduce using rule 21 (constant -> INTNUM .)


state 46

    (22) constant -> FLOATNUM .

    ;               reduce using rule 22 (constant -> FLOATNUM .)
    '               reduce using rule 22 (constant -> FLOATNUM .)
    +               reduce using rule 22 (constant -> FLOATNUM .)
    *               reduce using rule 22 (constant -> FLOATNUM .)
    -               reduce using rule 22 (constant -> FLOATNUM .)
    /               reduce using rule 22 (constant -> FLOATNUM .)
    DOTADD          reduce using rule 22 (constant -> FLOATNUM .)
    DOTSUB          reduce using rule 22 (constant -> FLOATNUM .)
    DOTMUL          reduce using rule 22 (constant -> FLOATNUM .)
    DOTDIV          reduce using rule 22 (constant -> FLOATNUM .)
    EQ              reduce using rule 22 (constant -> FLOATNUM .)
    NEQ             reduce using rule 22 (constant -> FLOATNUM .)
    >               reduce using rule 22 (constant -> FLOATNUM .)
    <               reduce using rule 22 (constant -> FLOATNUM .)
    LE              reduce using rule 22 (constant -> FLOATNUM .)
    GE              reduce using rule 22 (constant -> FLOATNUM .)
    ,               reduce using rule 22 (constant -> FLOATNUM .)
    )               reduce using rule 22 (constant -> FLOATNUM .)
    ]               reduce using rule 22 (constant -> FLOATNUM .)
    :               reduce using rule 22 (constant -> FLOATNUM .)
    {               reduce using rule 22 (constant -> FLOATNUM .)
    ID              reduce using rule 22 (constant -> FLOATNUM .)
    IF              reduce using rule 22 (constant -> FLOATNUM .)
    WHILE           reduce using rule 22 (constant -> FLOATNUM .)
    FOR             reduce using rule 22 (constant -> FLOATNUM .)
    RETURN          reduce using rule 22 (constant -> FLOATNUM .)
    BREAK           reduce using rule 22 (constant -> FLOATNUM .)
    CONTINUE        reduce using rule 22 (constant -> FLOATNUM .)
    PRINT           reduce using rule 22 (constant -> FLOATNUM .)


state 47

    (23) constant -> STRING .

    ;               reduce using rule 23 (constant -> STRING .)
    '               reduce using rule 23 (constant -> STRING .)
    +               reduce using rule 23 (constant -> STRING .)
    *               reduce using rule 23 (constant -> STRING .)
    -               reduce using rule 23 (constant -> STRING .)
    /               reduce using rule 23 (constant -> STRING .)
    DOTADD          reduce using rule 23 (constant -> STRING .)
    DOTSUB          reduce using rule 23 (constant -> STRING .)
    DOTMUL          reduce using rule 23 (constant -> STRING .)
    DOTDIV          reduce using rule 23 (constant -> STRING .)
    EQ              reduce using rule 23 (constant -> STRING .)
    NEQ             reduce using rule 23 (constant -> STRING .)
    >               reduce using rule 23 (constant -> STRING .)
    <               reduce using rule 23 (constant -> STRING .)
    LE              reduce using rule 23 (constant -> STRING .)
    GE              reduce using rule 23 (constant -> STRING .)
    ,               reduce using rule 23 (constant -> STRING .)
    )               reduce using rule 23 (constant -> STRING .)
    ]               reduce using rule 23 (constant -> STRING .)
    :               reduce using rule 23 (constant -> STRING .)
    {               reduce using rule 23 (constant -> STRING .)
    ID              reduce using rule 23 (constant -> STRING .)
    IF              reduce using rule 23 (constant -> STRING .)
    WHILE           reduce using rule 23 (constant -> STRING .)
    FOR             reduce using rule 23 (constant -> STRING .)
    RETURN          reduce using rule 23 (constant -> STRING .)
    BREAK           reduce using rule 23 (constant -> STRING .)
    CONTINUE        reduce using rule 23 (constant -> STRING .)
    PRINT           reduce using rule 23 (constant -> STRING .)


state 48

    (30) matrix -> EYE . ( int_sequence )

    (               shift and go to state 83


state 49

    (31) matrix -> ZEROS . ( int_sequence )

    (               shift and go to state 84


state 50

    (32) matrix -> ONES . ( int_sequence )

    (               shift and go to state 85


state 51

    (33) matrix -> [ . matrix_row ]
    (36) matrix_row -> . matrix_row , value
    (37) matrix_row -> . value
    (26) value -> . variable
    (27) value -> . matrix
    (28) value -> . constant
    (24) variable -> . ID
    (25) variable -> . matrix_access
    (30) matrix -> . EYE ( int_sequence )
    (31) matrix -> . ZEROS ( int_sequence )
    (32) matrix -> . ONES ( int_sequence )
    (33) matrix -> . [ matrix_row ]
    (21) constant -> . INTNUM
    (22) constant -> . FLOATNUM
    (23) constant -> . STRING
    (29) matrix_access -> . ID [ int_sequence ]

    ID              shift and go to state 15
    EYE             shift and go to state 48
    ZEROS           shift and go to state 49
    ONES            shift and go to state 50
    [               shift and go to state 51
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STRING          shift and go to state 47

    matrix_row                     shift and go to state 86
    value                          shift and go to state 87
    variable                       shift and go to state 88
    matrix                         shift and go to state 89
    constant                       shift and go to state 90
    matrix_access                  shift and go to state 16

state 52

    (53) un_op -> - . expression
    (14) expression -> . variable
    (15) expression -> . constant
    (16) expression -> . matrix
    (17) expression -> . un_op
    (18) expression -> . bin_op
    (19) expression -> . logic_op
    (20) expression -> . ( expression )
    (24) variable -> . ID
    (25) variable -> . matrix_access
    (21) constant -> . INTNUM
    (22) constant -> . FLOATNUM
    (23) constant -> . STRING
    (30) matrix -> . EYE ( int_sequence )
    (31) matrix -> . ZEROS ( int_sequence )
    (32) matrix -> . ONES ( int_sequence )
    (33) matrix -> . [ matrix_row ]
    (52) un_op -> . expression '
    (53) un_op -> . - expression
    (38) bin_op -> . expression + expression
    (39) bin_op -> . expression * expression
    (40) bin_op -> . expression - expression
    (41) bin_op -> . expression / expression
    (42) bin_op -> . expression DOTADD expression
    (43) bin_op -> . expression DOTSUB expression
    (44) bin_op -> . expression DOTMUL expression
    (45) bin_op -> . expression DOTDIV expression
    (46) logic_op -> . expression EQ expression
    (47) logic_op -> . expression NEQ expression
    (48) logic_op -> . expression > expression
    (49) logic_op -> . expression < expression
    (50) logic_op -> . expression LE expression
    (51) logic_op -> . expression GE expression
    (29) matrix_access -> . ID [ int_sequence ]

    (               shift and go to state 44
    ID              shift and go to state 15
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STRING          shift and go to state 47
    EYE             shift and go to state 48
    ZEROS           shift and go to state 49
    ONES            shift and go to state 50
    [               shift and go to state 51
    -               shift and go to state 52

    expression                     shift and go to state 91
    variable                       shift and go to state 38
    constant                       shift and go to state 39
    matrix                         shift and go to state 40
    un_op                          shift and go to state 41
    bin_op                         shift and go to state 42
    logic_op                       shift and go to state 43
    matrix_access                  shift and go to state 16

state 53

    (69) break_instr -> BREAK ; .

    {               reduce using rule 69 (break_instr -> BREAK ; .)
    ID              reduce using rule 69 (break_instr -> BREAK ; .)
    IF              reduce using rule 69 (break_instr -> BREAK ; .)
    WHILE           reduce using rule 69 (break_instr -> BREAK ; .)
    FOR             reduce using rule 69 (break_instr -> BREAK ; .)
    RETURN          reduce using rule 69 (break_instr -> BREAK ; .)
    BREAK           reduce using rule 69 (break_instr -> BREAK ; .)
    CONTINUE        reduce using rule 69 (break_instr -> BREAK ; .)
    PRINT           reduce using rule 69 (break_instr -> BREAK ; .)
    $end            reduce using rule 69 (break_instr -> BREAK ; .)
    }               reduce using rule 69 (break_instr -> BREAK ; .)
    ELSE            reduce using rule 69 (break_instr -> BREAK ; .)


state 54

    (68) continue_instr -> CONTINUE ; .

    {               reduce using rule 68 (continue_instr -> CONTINUE ; .)
    ID              reduce using rule 68 (continue_instr -> CONTINUE ; .)
    IF              reduce using rule 68 (continue_instr -> CONTINUE ; .)
    WHILE           reduce using rule 68 (continue_instr -> CONTINUE ; .)
    FOR             reduce using rule 68 (continue_instr -> CONTINUE ; .)
    RETURN          reduce using rule 68 (continue_instr -> CONTINUE ; .)
    BREAK           reduce using rule 68 (continue_instr -> CONTINUE ; .)
    CONTINUE        reduce using rule 68 (continue_instr -> CONTINUE ; .)
    PRINT           reduce using rule 68 (continue_instr -> CONTINUE ; .)
    $end            reduce using rule 68 (continue_instr -> CONTINUE ; .)
    }               reduce using rule 68 (continue_instr -> CONTINUE ; .)
    ELSE            reduce using rule 68 (continue_instr -> CONTINUE ; .)


state 55

    (70) print_instr -> PRINT instructions_to_print . ;
    (71) instructions_to_print -> instructions_to_print . , expression

    ;               shift and go to state 92
    ,               shift and go to state 93


state 56

    (72) instructions_to_print -> expression .
    (52) un_op -> expression . '
    (38) bin_op -> expression . + expression
    (39) bin_op -> expression . * expression
    (40) bin_op -> expression . - expression
    (41) bin_op -> expression . / expression
    (42) bin_op -> expression . DOTADD expression
    (43) bin_op -> expression . DOTSUB expression
    (44) bin_op -> expression . DOTMUL expression
    (45) bin_op -> expression . DOTDIV expression
    (46) logic_op -> expression . EQ expression
    (47) logic_op -> expression . NEQ expression
    (48) logic_op -> expression . > expression
    (49) logic_op -> expression . < expression
    (50) logic_op -> expression . LE expression
    (51) logic_op -> expression . GE expression

    ;               reduce using rule 72 (instructions_to_print -> expression .)
    ,               reduce using rule 72 (instructions_to_print -> expression .)
    '               shift and go to state 67
    +               shift and go to state 68
    *               shift and go to state 69
    -               shift and go to state 70
    /               shift and go to state 71
    DOTADD          shift and go to state 72
    DOTSUB          shift and go to state 73
    DOTMUL          shift and go to state 74
    DOTDIV          shift and go to state 75
    EQ              shift and go to state 76
    NEQ             shift and go to state 77
    >               shift and go to state 78
    <               shift and go to state 79
    LE              shift and go to state 80
    GE              shift and go to state 81


state 57

    (5) statements -> statements { statements . }
    (3) statements -> statements . statement
    (5) statements -> statements . { statements }
    (6) statement -> . assignment
    (7) statement -> . flow_control
    (8) assignment -> . variable assignment_op expression ;
    (54) flow_control -> . conditional_statement
    (55) flow_control -> . while_loop
    (56) flow_control -> . for_loop
    (57) flow_control -> . return_instr
    (58) flow_control -> . break_instr
    (59) flow_control -> . continue_instr
    (60) flow_control -> . print_instr
    (24) variable -> . ID
    (25) variable -> . matrix_access
    (61) conditional_statement -> . IF ( logic_op ) conditional_instructions
    (62) conditional_statement -> . IF ( logic_op ) conditional_instructions ELSE conditional_instructions
    (65) while_loop -> . WHILE ( logic_op ) conditional_instructions
    (66) for_loop -> . FOR ID = expression : expression conditional_instructions
    (67) return_instr -> . RETURN expression ;
    (69) break_instr -> . BREAK ;
    (68) continue_instr -> . CONTINUE ;
    (70) print_instr -> . PRINT instructions_to_print ;
    (29) matrix_access -> . ID [ int_sequence ]

    }               shift and go to state 94
    {               shift and go to state 25
    ID              shift and go to state 15
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    RETURN          shift and go to state 20
    BREAK           shift and go to state 21
    CONTINUE        shift and go to state 22
    PRINT           shift and go to state 23

    statement                      shift and go to state 24
    assignment                     shift and go to state 5
    flow_control                   shift and go to state 6
    variable                       shift and go to state 7
    conditional_statement          shift and go to state 8
    while_loop                     shift and go to state 9
    for_loop                       shift and go to state 10
    return_instr                   shift and go to state 11
    break_instr                    shift and go to state 12
    continue_instr                 shift and go to state 13
    print_instr                    shift and go to state 14
    matrix_access                  shift and go to state 16

state 58

    (2) statements -> { statements } .

    {               reduce using rule 2 (statements -> { statements } .)
    ID              reduce using rule 2 (statements -> { statements } .)
    IF              reduce using rule 2 (statements -> { statements } .)
    WHILE           reduce using rule 2 (statements -> { statements } .)
    FOR             reduce using rule 2 (statements -> { statements } .)
    RETURN          reduce using rule 2 (statements -> { statements } .)
    BREAK           reduce using rule 2 (statements -> { statements } .)
    CONTINUE        reduce using rule 2 (statements -> { statements } .)
    PRINT           reduce using rule 2 (statements -> { statements } .)
    $end            reduce using rule 2 (statements -> { statements } .)
    }               reduce using rule 2 (statements -> { statements } .)


state 59

    (8) assignment -> variable assignment_op expression . ;
    (52) un_op -> expression . '
    (38) bin_op -> expression . + expression
    (39) bin_op -> expression . * expression
    (40) bin_op -> expression . - expression
    (41) bin_op -> expression . / expression
    (42) bin_op -> expression . DOTADD expression
    (43) bin_op -> expression . DOTSUB expression
    (44) bin_op -> expression . DOTMUL expression
    (45) bin_op -> expression . DOTDIV expression
    (46) logic_op -> expression . EQ expression
    (47) logic_op -> expression . NEQ expression
    (48) logic_op -> expression . > expression
    (49) logic_op -> expression . < expression
    (50) logic_op -> expression . LE expression
    (51) logic_op -> expression . GE expression

    ;               shift and go to state 95
    '               shift and go to state 67
    +               shift and go to state 68
    *               shift and go to state 69
    -               shift and go to state 70
    /               shift and go to state 71
    DOTADD          shift and go to state 72
    DOTSUB          shift and go to state 73
    DOTMUL          shift and go to state 74
    DOTDIV          shift and go to state 75
    EQ              shift and go to state 76
    NEQ             shift and go to state 77
    >               shift and go to state 78
    <               shift and go to state 79
    LE              shift and go to state 80
    GE              shift and go to state 81


state 60

    (29) matrix_access -> ID [ int_sequence . ]
    (34) int_sequence -> int_sequence . , INTNUM

    ]               shift and go to state 96
    ,               shift and go to state 97


state 61

    (35) int_sequence -> INTNUM .

    ]               reduce using rule 35 (int_sequence -> INTNUM .)
    ,               reduce using rule 35 (int_sequence -> INTNUM .)
    )               reduce using rule 35 (int_sequence -> INTNUM .)


state 62

    (61) conditional_statement -> IF ( logic_op . ) conditional_instructions
    (62) conditional_statement -> IF ( logic_op . ) conditional_instructions ELSE conditional_instructions
    (19) expression -> logic_op .

    )               shift and go to state 98
    EQ              reduce using rule 19 (expression -> logic_op .)
    NEQ             reduce using rule 19 (expression -> logic_op .)
    >               reduce using rule 19 (expression -> logic_op .)
    <               reduce using rule 19 (expression -> logic_op .)
    LE              reduce using rule 19 (expression -> logic_op .)
    GE              reduce using rule 19 (expression -> logic_op .)
    '               reduce using rule 19 (expression -> logic_op .)
    +               reduce using rule 19 (expression -> logic_op .)
    *               reduce using rule 19 (expression -> logic_op .)
    -               reduce using rule 19 (expression -> logic_op .)
    /               reduce using rule 19 (expression -> logic_op .)
    DOTADD          reduce using rule 19 (expression -> logic_op .)
    DOTSUB          reduce using rule 19 (expression -> logic_op .)
    DOTMUL          reduce using rule 19 (expression -> logic_op .)
    DOTDIV          reduce using rule 19 (expression -> logic_op .)


state 63

    (46) logic_op -> expression . EQ expression
    (47) logic_op -> expression . NEQ expression
    (48) logic_op -> expression . > expression
    (49) logic_op -> expression . < expression
    (50) logic_op -> expression . LE expression
    (51) logic_op -> expression . GE expression
    (52) un_op -> expression . '
    (38) bin_op -> expression . + expression
    (39) bin_op -> expression . * expression
    (40) bin_op -> expression . - expression
    (41) bin_op -> expression . / expression
    (42) bin_op -> expression . DOTADD expression
    (43) bin_op -> expression . DOTSUB expression
    (44) bin_op -> expression . DOTMUL expression
    (45) bin_op -> expression . DOTDIV expression

    EQ              shift and go to state 76
    NEQ             shift and go to state 77
    >               shift and go to state 78
    <               shift and go to state 79
    LE              shift and go to state 80
    GE              shift and go to state 81
    '               shift and go to state 67
    +               shift and go to state 68
    *               shift and go to state 69
    -               shift and go to state 70
    /               shift and go to state 71
    DOTADD          shift and go to state 72
    DOTSUB          shift and go to state 73
    DOTMUL          shift and go to state 74
    DOTDIV          shift and go to state 75


state 64

    (65) while_loop -> WHILE ( logic_op . ) conditional_instructions
    (19) expression -> logic_op .

    )               shift and go to state 99
    EQ              reduce using rule 19 (expression -> logic_op .)
    NEQ             reduce using rule 19 (expression -> logic_op .)
    >               reduce using rule 19 (expression -> logic_op .)
    <               reduce using rule 19 (expression -> logic_op .)
    LE              reduce using rule 19 (expression -> logic_op .)
    GE              reduce using rule 19 (expression -> logic_op .)
    '               reduce using rule 19 (expression -> logic_op .)
    +               reduce using rule 19 (expression -> logic_op .)
    *               reduce using rule 19 (expression -> logic_op .)
    -               reduce using rule 19 (expression -> logic_op .)
    /               reduce using rule 19 (expression -> logic_op .)
    DOTADD          reduce using rule 19 (expression -> logic_op .)
    DOTSUB          reduce using rule 19 (expression -> logic_op .)
    DOTMUL          reduce using rule 19 (expression -> logic_op .)
    DOTDIV          reduce using rule 19 (expression -> logic_op .)


state 65

    (66) for_loop -> FOR ID = . expression : expression conditional_instructions
    (14) expression -> . variable
    (15) expression -> . constant
    (16) expression -> . matrix
    (17) expression -> . un_op
    (18) expression -> . bin_op
    (19) expression -> . logic_op
    (20) expression -> . ( expression )
    (24) variable -> . ID
    (25) variable -> . matrix_access
    (21) constant -> . INTNUM
    (22) constant -> . FLOATNUM
    (23) constant -> . STRING
    (30) matrix -> . EYE ( int_sequence )
    (31) matrix -> . ZEROS ( int_sequence )
    (32) matrix -> . ONES ( int_sequence )
    (33) matrix -> . [ matrix_row ]
    (52) un_op -> . expression '
    (53) un_op -> . - expression
    (38) bin_op -> . expression + expression
    (39) bin_op -> . expression * expression
    (40) bin_op -> . expression - expression
    (41) bin_op -> . expression / expression
    (42) bin_op -> . expression DOTADD expression
    (43) bin_op -> . expression DOTSUB expression
    (44) bin_op -> . expression DOTMUL expression
    (45) bin_op -> . expression DOTDIV expression
    (46) logic_op -> . expression EQ expression
    (47) logic_op -> . expression NEQ expression
    (48) logic_op -> . expression > expression
    (49) logic_op -> . expression < expression
    (50) logic_op -> . expression LE expression
    (51) logic_op -> . expression GE expression
    (29) matrix_access -> . ID [ int_sequence ]

    (               shift and go to state 44
    ID              shift and go to state 15
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STRING          shift and go to state 47
    EYE             shift and go to state 48
    ZEROS           shift and go to state 49
    ONES            shift and go to state 50
    [               shift and go to state 51
    -               shift and go to state 52

    expression                     shift and go to state 100
    variable                       shift and go to state 38
    constant                       shift and go to state 39
    matrix                         shift and go to state 40
    un_op                          shift and go to state 41
    bin_op                         shift and go to state 42
    logic_op                       shift and go to state 43
    matrix_access                  shift and go to state 16

state 66

    (67) return_instr -> RETURN expression ; .

    {               reduce using rule 67 (return_instr -> RETURN expression ; .)
    ID              reduce using rule 67 (return_instr -> RETURN expression ; .)
    IF              reduce using rule 67 (return_instr -> RETURN expression ; .)
    WHILE           reduce using rule 67 (return_instr -> RETURN expression ; .)
    FOR             reduce using rule 67 (return_instr -> RETURN expression ; .)
    RETURN          reduce using rule 67 (return_instr -> RETURN expression ; .)
    BREAK           reduce using rule 67 (return_instr -> RETURN expression ; .)
    CONTINUE        reduce using rule 67 (return_instr -> RETURN expression ; .)
    PRINT           reduce using rule 67 (return_instr -> RETURN expression ; .)
    $end            reduce using rule 67 (return_instr -> RETURN expression ; .)
    }               reduce using rule 67 (return_instr -> RETURN expression ; .)
    ELSE            reduce using rule 67 (return_instr -> RETURN expression ; .)


state 67

    (52) un_op -> expression ' .

    ;               reduce using rule 52 (un_op -> expression ' .)
    '               reduce using rule 52 (un_op -> expression ' .)
    +               reduce using rule 52 (un_op -> expression ' .)
    *               reduce using rule 52 (un_op -> expression ' .)
    -               reduce using rule 52 (un_op -> expression ' .)
    /               reduce using rule 52 (un_op -> expression ' .)
    DOTADD          reduce using rule 52 (un_op -> expression ' .)
    DOTSUB          reduce using rule 52 (un_op -> expression ' .)
    DOTMUL          reduce using rule 52 (un_op -> expression ' .)
    DOTDIV          reduce using rule 52 (un_op -> expression ' .)
    EQ              reduce using rule 52 (un_op -> expression ' .)
    NEQ             reduce using rule 52 (un_op -> expression ' .)
    >               reduce using rule 52 (un_op -> expression ' .)
    <               reduce using rule 52 (un_op -> expression ' .)
    LE              reduce using rule 52 (un_op -> expression ' .)
    GE              reduce using rule 52 (un_op -> expression ' .)
    ,               reduce using rule 52 (un_op -> expression ' .)
    )               reduce using rule 52 (un_op -> expression ' .)
    :               reduce using rule 52 (un_op -> expression ' .)
    {               reduce using rule 52 (un_op -> expression ' .)
    ID              reduce using rule 52 (un_op -> expression ' .)
    IF              reduce using rule 52 (un_op -> expression ' .)
    WHILE           reduce using rule 52 (un_op -> expression ' .)
    FOR             reduce using rule 52 (un_op -> expression ' .)
    RETURN          reduce using rule 52 (un_op -> expression ' .)
    BREAK           reduce using rule 52 (un_op -> expression ' .)
    CONTINUE        reduce using rule 52 (un_op -> expression ' .)
    PRINT           reduce using rule 52 (un_op -> expression ' .)


state 68

    (38) bin_op -> expression + . expression
    (14) expression -> . variable
    (15) expression -> . constant
    (16) expression -> . matrix
    (17) expression -> . un_op
    (18) expression -> . bin_op
    (19) expression -> . logic_op
    (20) expression -> . ( expression )
    (24) variable -> . ID
    (25) variable -> . matrix_access
    (21) constant -> . INTNUM
    (22) constant -> . FLOATNUM
    (23) constant -> . STRING
    (30) matrix -> . EYE ( int_sequence )
    (31) matrix -> . ZEROS ( int_sequence )
    (32) matrix -> . ONES ( int_sequence )
    (33) matrix -> . [ matrix_row ]
    (52) un_op -> . expression '
    (53) un_op -> . - expression
    (38) bin_op -> . expression + expression
    (39) bin_op -> . expression * expression
    (40) bin_op -> . expression - expression
    (41) bin_op -> . expression / expression
    (42) bin_op -> . expression DOTADD expression
    (43) bin_op -> . expression DOTSUB expression
    (44) bin_op -> . expression DOTMUL expression
    (45) bin_op -> . expression DOTDIV expression
    (46) logic_op -> . expression EQ expression
    (47) logic_op -> . expression NEQ expression
    (48) logic_op -> . expression > expression
    (49) logic_op -> . expression < expression
    (50) logic_op -> . expression LE expression
    (51) logic_op -> . expression GE expression
    (29) matrix_access -> . ID [ int_sequence ]

    (               shift and go to state 44
    ID              shift and go to state 15
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STRING          shift and go to state 47
    EYE             shift and go to state 48
    ZEROS           shift and go to state 49
    ONES            shift and go to state 50
    [               shift and go to state 51
    -               shift and go to state 52

    expression                     shift and go to state 101
    variable                       shift and go to state 38
    constant                       shift and go to state 39
    matrix                         shift and go to state 40
    un_op                          shift and go to state 41
    bin_op                         shift and go to state 42
    logic_op                       shift and go to state 43
    matrix_access                  shift and go to state 16

state 69

    (39) bin_op -> expression * . expression
    (14) expression -> . variable
    (15) expression -> . constant
    (16) expression -> . matrix
    (17) expression -> . un_op
    (18) expression -> . bin_op
    (19) expression -> . logic_op
    (20) expression -> . ( expression )
    (24) variable -> . ID
    (25) variable -> . matrix_access
    (21) constant -> . INTNUM
    (22) constant -> . FLOATNUM
    (23) constant -> . STRING
    (30) matrix -> . EYE ( int_sequence )
    (31) matrix -> . ZEROS ( int_sequence )
    (32) matrix -> . ONES ( int_sequence )
    (33) matrix -> . [ matrix_row ]
    (52) un_op -> . expression '
    (53) un_op -> . - expression
    (38) bin_op -> . expression + expression
    (39) bin_op -> . expression * expression
    (40) bin_op -> . expression - expression
    (41) bin_op -> . expression / expression
    (42) bin_op -> . expression DOTADD expression
    (43) bin_op -> . expression DOTSUB expression
    (44) bin_op -> . expression DOTMUL expression
    (45) bin_op -> . expression DOTDIV expression
    (46) logic_op -> . expression EQ expression
    (47) logic_op -> . expression NEQ expression
    (48) logic_op -> . expression > expression
    (49) logic_op -> . expression < expression
    (50) logic_op -> . expression LE expression
    (51) logic_op -> . expression GE expression
    (29) matrix_access -> . ID [ int_sequence ]

    (               shift and go to state 44
    ID              shift and go to state 15
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STRING          shift and go to state 47
    EYE             shift and go to state 48
    ZEROS           shift and go to state 49
    ONES            shift and go to state 50
    [               shift and go to state 51
    -               shift and go to state 52

    expression                     shift and go to state 102
    variable                       shift and go to state 38
    constant                       shift and go to state 39
    matrix                         shift and go to state 40
    un_op                          shift and go to state 41
    bin_op                         shift and go to state 42
    logic_op                       shift and go to state 43
    matrix_access                  shift and go to state 16

state 70

    (40) bin_op -> expression - . expression
    (14) expression -> . variable
    (15) expression -> . constant
    (16) expression -> . matrix
    (17) expression -> . un_op
    (18) expression -> . bin_op
    (19) expression -> . logic_op
    (20) expression -> . ( expression )
    (24) variable -> . ID
    (25) variable -> . matrix_access
    (21) constant -> . INTNUM
    (22) constant -> . FLOATNUM
    (23) constant -> . STRING
    (30) matrix -> . EYE ( int_sequence )
    (31) matrix -> . ZEROS ( int_sequence )
    (32) matrix -> . ONES ( int_sequence )
    (33) matrix -> . [ matrix_row ]
    (52) un_op -> . expression '
    (53) un_op -> . - expression
    (38) bin_op -> . expression + expression
    (39) bin_op -> . expression * expression
    (40) bin_op -> . expression - expression
    (41) bin_op -> . expression / expression
    (42) bin_op -> . expression DOTADD expression
    (43) bin_op -> . expression DOTSUB expression
    (44) bin_op -> . expression DOTMUL expression
    (45) bin_op -> . expression DOTDIV expression
    (46) logic_op -> . expression EQ expression
    (47) logic_op -> . expression NEQ expression
    (48) logic_op -> . expression > expression
    (49) logic_op -> . expression < expression
    (50) logic_op -> . expression LE expression
    (51) logic_op -> . expression GE expression
    (29) matrix_access -> . ID [ int_sequence ]

    (               shift and go to state 44
    ID              shift and go to state 15
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STRING          shift and go to state 47
    EYE             shift and go to state 48
    ZEROS           shift and go to state 49
    ONES            shift and go to state 50
    [               shift and go to state 51
    -               shift and go to state 52

    expression                     shift and go to state 103
    variable                       shift and go to state 38
    constant                       shift and go to state 39
    matrix                         shift and go to state 40
    un_op                          shift and go to state 41
    bin_op                         shift and go to state 42
    logic_op                       shift and go to state 43
    matrix_access                  shift and go to state 16

state 71

    (41) bin_op -> expression / . expression
    (14) expression -> . variable
    (15) expression -> . constant
    (16) expression -> . matrix
    (17) expression -> . un_op
    (18) expression -> . bin_op
    (19) expression -> . logic_op
    (20) expression -> . ( expression )
    (24) variable -> . ID
    (25) variable -> . matrix_access
    (21) constant -> . INTNUM
    (22) constant -> . FLOATNUM
    (23) constant -> . STRING
    (30) matrix -> . EYE ( int_sequence )
    (31) matrix -> . ZEROS ( int_sequence )
    (32) matrix -> . ONES ( int_sequence )
    (33) matrix -> . [ matrix_row ]
    (52) un_op -> . expression '
    (53) un_op -> . - expression
    (38) bin_op -> . expression + expression
    (39) bin_op -> . expression * expression
    (40) bin_op -> . expression - expression
    (41) bin_op -> . expression / expression
    (42) bin_op -> . expression DOTADD expression
    (43) bin_op -> . expression DOTSUB expression
    (44) bin_op -> . expression DOTMUL expression
    (45) bin_op -> . expression DOTDIV expression
    (46) logic_op -> . expression EQ expression
    (47) logic_op -> . expression NEQ expression
    (48) logic_op -> . expression > expression
    (49) logic_op -> . expression < expression
    (50) logic_op -> . expression LE expression
    (51) logic_op -> . expression GE expression
    (29) matrix_access -> . ID [ int_sequence ]

    (               shift and go to state 44
    ID              shift and go to state 15
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STRING          shift and go to state 47
    EYE             shift and go to state 48
    ZEROS           shift and go to state 49
    ONES            shift and go to state 50
    [               shift and go to state 51
    -               shift and go to state 52

    expression                     shift and go to state 104
    variable                       shift and go to state 38
    constant                       shift and go to state 39
    matrix                         shift and go to state 40
    un_op                          shift and go to state 41
    bin_op                         shift and go to state 42
    logic_op                       shift and go to state 43
    matrix_access                  shift and go to state 16

state 72

    (42) bin_op -> expression DOTADD . expression
    (14) expression -> . variable
    (15) expression -> . constant
    (16) expression -> . matrix
    (17) expression -> . un_op
    (18) expression -> . bin_op
    (19) expression -> . logic_op
    (20) expression -> . ( expression )
    (24) variable -> . ID
    (25) variable -> . matrix_access
    (21) constant -> . INTNUM
    (22) constant -> . FLOATNUM
    (23) constant -> . STRING
    (30) matrix -> . EYE ( int_sequence )
    (31) matrix -> . ZEROS ( int_sequence )
    (32) matrix -> . ONES ( int_sequence )
    (33) matrix -> . [ matrix_row ]
    (52) un_op -> . expression '
    (53) un_op -> . - expression
    (38) bin_op -> . expression + expression
    (39) bin_op -> . expression * expression
    (40) bin_op -> . expression - expression
    (41) bin_op -> . expression / expression
    (42) bin_op -> . expression DOTADD expression
    (43) bin_op -> . expression DOTSUB expression
    (44) bin_op -> . expression DOTMUL expression
    (45) bin_op -> . expression DOTDIV expression
    (46) logic_op -> . expression EQ expression
    (47) logic_op -> . expression NEQ expression
    (48) logic_op -> . expression > expression
    (49) logic_op -> . expression < expression
    (50) logic_op -> . expression LE expression
    (51) logic_op -> . expression GE expression
    (29) matrix_access -> . ID [ int_sequence ]

    (               shift and go to state 44
    ID              shift and go to state 15
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STRING          shift and go to state 47
    EYE             shift and go to state 48
    ZEROS           shift and go to state 49
    ONES            shift and go to state 50
    [               shift and go to state 51
    -               shift and go to state 52

    expression                     shift and go to state 105
    variable                       shift and go to state 38
    constant                       shift and go to state 39
    matrix                         shift and go to state 40
    un_op                          shift and go to state 41
    bin_op                         shift and go to state 42
    logic_op                       shift and go to state 43
    matrix_access                  shift and go to state 16

state 73

    (43) bin_op -> expression DOTSUB . expression
    (14) expression -> . variable
    (15) expression -> . constant
    (16) expression -> . matrix
    (17) expression -> . un_op
    (18) expression -> . bin_op
    (19) expression -> . logic_op
    (20) expression -> . ( expression )
    (24) variable -> . ID
    (25) variable -> . matrix_access
    (21) constant -> . INTNUM
    (22) constant -> . FLOATNUM
    (23) constant -> . STRING
    (30) matrix -> . EYE ( int_sequence )
    (31) matrix -> . ZEROS ( int_sequence )
    (32) matrix -> . ONES ( int_sequence )
    (33) matrix -> . [ matrix_row ]
    (52) un_op -> . expression '
    (53) un_op -> . - expression
    (38) bin_op -> . expression + expression
    (39) bin_op -> . expression * expression
    (40) bin_op -> . expression - expression
    (41) bin_op -> . expression / expression
    (42) bin_op -> . expression DOTADD expression
    (43) bin_op -> . expression DOTSUB expression
    (44) bin_op -> . expression DOTMUL expression
    (45) bin_op -> . expression DOTDIV expression
    (46) logic_op -> . expression EQ expression
    (47) logic_op -> . expression NEQ expression
    (48) logic_op -> . expression > expression
    (49) logic_op -> . expression < expression
    (50) logic_op -> . expression LE expression
    (51) logic_op -> . expression GE expression
    (29) matrix_access -> . ID [ int_sequence ]

    (               shift and go to state 44
    ID              shift and go to state 15
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STRING          shift and go to state 47
    EYE             shift and go to state 48
    ZEROS           shift and go to state 49
    ONES            shift and go to state 50
    [               shift and go to state 51
    -               shift and go to state 52

    expression                     shift and go to state 106
    variable                       shift and go to state 38
    constant                       shift and go to state 39
    matrix                         shift and go to state 40
    un_op                          shift and go to state 41
    bin_op                         shift and go to state 42
    logic_op                       shift and go to state 43
    matrix_access                  shift and go to state 16

state 74

    (44) bin_op -> expression DOTMUL . expression
    (14) expression -> . variable
    (15) expression -> . constant
    (16) expression -> . matrix
    (17) expression -> . un_op
    (18) expression -> . bin_op
    (19) expression -> . logic_op
    (20) expression -> . ( expression )
    (24) variable -> . ID
    (25) variable -> . matrix_access
    (21) constant -> . INTNUM
    (22) constant -> . FLOATNUM
    (23) constant -> . STRING
    (30) matrix -> . EYE ( int_sequence )
    (31) matrix -> . ZEROS ( int_sequence )
    (32) matrix -> . ONES ( int_sequence )
    (33) matrix -> . [ matrix_row ]
    (52) un_op -> . expression '
    (53) un_op -> . - expression
    (38) bin_op -> . expression + expression
    (39) bin_op -> . expression * expression
    (40) bin_op -> . expression - expression
    (41) bin_op -> . expression / expression
    (42) bin_op -> . expression DOTADD expression
    (43) bin_op -> . expression DOTSUB expression
    (44) bin_op -> . expression DOTMUL expression
    (45) bin_op -> . expression DOTDIV expression
    (46) logic_op -> . expression EQ expression
    (47) logic_op -> . expression NEQ expression
    (48) logic_op -> . expression > expression
    (49) logic_op -> . expression < expression
    (50) logic_op -> . expression LE expression
    (51) logic_op -> . expression GE expression
    (29) matrix_access -> . ID [ int_sequence ]

    (               shift and go to state 44
    ID              shift and go to state 15
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STRING          shift and go to state 47
    EYE             shift and go to state 48
    ZEROS           shift and go to state 49
    ONES            shift and go to state 50
    [               shift and go to state 51
    -               shift and go to state 52

    expression                     shift and go to state 107
    variable                       shift and go to state 38
    constant                       shift and go to state 39
    matrix                         shift and go to state 40
    un_op                          shift and go to state 41
    bin_op                         shift and go to state 42
    logic_op                       shift and go to state 43
    matrix_access                  shift and go to state 16

state 75

    (45) bin_op -> expression DOTDIV . expression
    (14) expression -> . variable
    (15) expression -> . constant
    (16) expression -> . matrix
    (17) expression -> . un_op
    (18) expression -> . bin_op
    (19) expression -> . logic_op
    (20) expression -> . ( expression )
    (24) variable -> . ID
    (25) variable -> . matrix_access
    (21) constant -> . INTNUM
    (22) constant -> . FLOATNUM
    (23) constant -> . STRING
    (30) matrix -> . EYE ( int_sequence )
    (31) matrix -> . ZEROS ( int_sequence )
    (32) matrix -> . ONES ( int_sequence )
    (33) matrix -> . [ matrix_row ]
    (52) un_op -> . expression '
    (53) un_op -> . - expression
    (38) bin_op -> . expression + expression
    (39) bin_op -> . expression * expression
    (40) bin_op -> . expression - expression
    (41) bin_op -> . expression / expression
    (42) bin_op -> . expression DOTADD expression
    (43) bin_op -> . expression DOTSUB expression
    (44) bin_op -> . expression DOTMUL expression
    (45) bin_op -> . expression DOTDIV expression
    (46) logic_op -> . expression EQ expression
    (47) logic_op -> . expression NEQ expression
    (48) logic_op -> . expression > expression
    (49) logic_op -> . expression < expression
    (50) logic_op -> . expression LE expression
    (51) logic_op -> . expression GE expression
    (29) matrix_access -> . ID [ int_sequence ]

    (               shift and go to state 44
    ID              shift and go to state 15
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STRING          shift and go to state 47
    EYE             shift and go to state 48
    ZEROS           shift and go to state 49
    ONES            shift and go to state 50
    [               shift and go to state 51
    -               shift and go to state 52

    expression                     shift and go to state 108
    variable                       shift and go to state 38
    constant                       shift and go to state 39
    matrix                         shift and go to state 40
    un_op                          shift and go to state 41
    bin_op                         shift and go to state 42
    logic_op                       shift and go to state 43
    matrix_access                  shift and go to state 16

state 76

    (46) logic_op -> expression EQ . expression
    (14) expression -> . variable
    (15) expression -> . constant
    (16) expression -> . matrix
    (17) expression -> . un_op
    (18) expression -> . bin_op
    (19) expression -> . logic_op
    (20) expression -> . ( expression )
    (24) variable -> . ID
    (25) variable -> . matrix_access
    (21) constant -> . INTNUM
    (22) constant -> . FLOATNUM
    (23) constant -> . STRING
    (30) matrix -> . EYE ( int_sequence )
    (31) matrix -> . ZEROS ( int_sequence )
    (32) matrix -> . ONES ( int_sequence )
    (33) matrix -> . [ matrix_row ]
    (52) un_op -> . expression '
    (53) un_op -> . - expression
    (38) bin_op -> . expression + expression
    (39) bin_op -> . expression * expression
    (40) bin_op -> . expression - expression
    (41) bin_op -> . expression / expression
    (42) bin_op -> . expression DOTADD expression
    (43) bin_op -> . expression DOTSUB expression
    (44) bin_op -> . expression DOTMUL expression
    (45) bin_op -> . expression DOTDIV expression
    (46) logic_op -> . expression EQ expression
    (47) logic_op -> . expression NEQ expression
    (48) logic_op -> . expression > expression
    (49) logic_op -> . expression < expression
    (50) logic_op -> . expression LE expression
    (51) logic_op -> . expression GE expression
    (29) matrix_access -> . ID [ int_sequence ]

    (               shift and go to state 44
    ID              shift and go to state 15
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STRING          shift and go to state 47
    EYE             shift and go to state 48
    ZEROS           shift and go to state 49
    ONES            shift and go to state 50
    [               shift and go to state 51
    -               shift and go to state 52

    expression                     shift and go to state 109
    variable                       shift and go to state 38
    constant                       shift and go to state 39
    matrix                         shift and go to state 40
    un_op                          shift and go to state 41
    bin_op                         shift and go to state 42
    logic_op                       shift and go to state 43
    matrix_access                  shift and go to state 16

state 77

    (47) logic_op -> expression NEQ . expression
    (14) expression -> . variable
    (15) expression -> . constant
    (16) expression -> . matrix
    (17) expression -> . un_op
    (18) expression -> . bin_op
    (19) expression -> . logic_op
    (20) expression -> . ( expression )
    (24) variable -> . ID
    (25) variable -> . matrix_access
    (21) constant -> . INTNUM
    (22) constant -> . FLOATNUM
    (23) constant -> . STRING
    (30) matrix -> . EYE ( int_sequence )
    (31) matrix -> . ZEROS ( int_sequence )
    (32) matrix -> . ONES ( int_sequence )
    (33) matrix -> . [ matrix_row ]
    (52) un_op -> . expression '
    (53) un_op -> . - expression
    (38) bin_op -> . expression + expression
    (39) bin_op -> . expression * expression
    (40) bin_op -> . expression - expression
    (41) bin_op -> . expression / expression
    (42) bin_op -> . expression DOTADD expression
    (43) bin_op -> . expression DOTSUB expression
    (44) bin_op -> . expression DOTMUL expression
    (45) bin_op -> . expression DOTDIV expression
    (46) logic_op -> . expression EQ expression
    (47) logic_op -> . expression NEQ expression
    (48) logic_op -> . expression > expression
    (49) logic_op -> . expression < expression
    (50) logic_op -> . expression LE expression
    (51) logic_op -> . expression GE expression
    (29) matrix_access -> . ID [ int_sequence ]

    (               shift and go to state 44
    ID              shift and go to state 15
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STRING          shift and go to state 47
    EYE             shift and go to state 48
    ZEROS           shift and go to state 49
    ONES            shift and go to state 50
    [               shift and go to state 51
    -               shift and go to state 52

    expression                     shift and go to state 110
    variable                       shift and go to state 38
    constant                       shift and go to state 39
    matrix                         shift and go to state 40
    un_op                          shift and go to state 41
    bin_op                         shift and go to state 42
    logic_op                       shift and go to state 43
    matrix_access                  shift and go to state 16

state 78

    (48) logic_op -> expression > . expression
    (14) expression -> . variable
    (15) expression -> . constant
    (16) expression -> . matrix
    (17) expression -> . un_op
    (18) expression -> . bin_op
    (19) expression -> . logic_op
    (20) expression -> . ( expression )
    (24) variable -> . ID
    (25) variable -> . matrix_access
    (21) constant -> . INTNUM
    (22) constant -> . FLOATNUM
    (23) constant -> . STRING
    (30) matrix -> . EYE ( int_sequence )
    (31) matrix -> . ZEROS ( int_sequence )
    (32) matrix -> . ONES ( int_sequence )
    (33) matrix -> . [ matrix_row ]
    (52) un_op -> . expression '
    (53) un_op -> . - expression
    (38) bin_op -> . expression + expression
    (39) bin_op -> . expression * expression
    (40) bin_op -> . expression - expression
    (41) bin_op -> . expression / expression
    (42) bin_op -> . expression DOTADD expression
    (43) bin_op -> . expression DOTSUB expression
    (44) bin_op -> . expression DOTMUL expression
    (45) bin_op -> . expression DOTDIV expression
    (46) logic_op -> . expression EQ expression
    (47) logic_op -> . expression NEQ expression
    (48) logic_op -> . expression > expression
    (49) logic_op -> . expression < expression
    (50) logic_op -> . expression LE expression
    (51) logic_op -> . expression GE expression
    (29) matrix_access -> . ID [ int_sequence ]

    (               shift and go to state 44
    ID              shift and go to state 15
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STRING          shift and go to state 47
    EYE             shift and go to state 48
    ZEROS           shift and go to state 49
    ONES            shift and go to state 50
    [               shift and go to state 51
    -               shift and go to state 52

    expression                     shift and go to state 111
    variable                       shift and go to state 38
    constant                       shift and go to state 39
    matrix                         shift and go to state 40
    un_op                          shift and go to state 41
    bin_op                         shift and go to state 42
    logic_op                       shift and go to state 43
    matrix_access                  shift and go to state 16

state 79

    (49) logic_op -> expression < . expression
    (14) expression -> . variable
    (15) expression -> . constant
    (16) expression -> . matrix
    (17) expression -> . un_op
    (18) expression -> . bin_op
    (19) expression -> . logic_op
    (20) expression -> . ( expression )
    (24) variable -> . ID
    (25) variable -> . matrix_access
    (21) constant -> . INTNUM
    (22) constant -> . FLOATNUM
    (23) constant -> . STRING
    (30) matrix -> . EYE ( int_sequence )
    (31) matrix -> . ZEROS ( int_sequence )
    (32) matrix -> . ONES ( int_sequence )
    (33) matrix -> . [ matrix_row ]
    (52) un_op -> . expression '
    (53) un_op -> . - expression
    (38) bin_op -> . expression + expression
    (39) bin_op -> . expression * expression
    (40) bin_op -> . expression - expression
    (41) bin_op -> . expression / expression
    (42) bin_op -> . expression DOTADD expression
    (43) bin_op -> . expression DOTSUB expression
    (44) bin_op -> . expression DOTMUL expression
    (45) bin_op -> . expression DOTDIV expression
    (46) logic_op -> . expression EQ expression
    (47) logic_op -> . expression NEQ expression
    (48) logic_op -> . expression > expression
    (49) logic_op -> . expression < expression
    (50) logic_op -> . expression LE expression
    (51) logic_op -> . expression GE expression
    (29) matrix_access -> . ID [ int_sequence ]

    (               shift and go to state 44
    ID              shift and go to state 15
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STRING          shift and go to state 47
    EYE             shift and go to state 48
    ZEROS           shift and go to state 49
    ONES            shift and go to state 50
    [               shift and go to state 51
    -               shift and go to state 52

    expression                     shift and go to state 112
    variable                       shift and go to state 38
    constant                       shift and go to state 39
    matrix                         shift and go to state 40
    un_op                          shift and go to state 41
    bin_op                         shift and go to state 42
    logic_op                       shift and go to state 43
    matrix_access                  shift and go to state 16

state 80

    (50) logic_op -> expression LE . expression
    (14) expression -> . variable
    (15) expression -> . constant
    (16) expression -> . matrix
    (17) expression -> . un_op
    (18) expression -> . bin_op
    (19) expression -> . logic_op
    (20) expression -> . ( expression )
    (24) variable -> . ID
    (25) variable -> . matrix_access
    (21) constant -> . INTNUM
    (22) constant -> . FLOATNUM
    (23) constant -> . STRING
    (30) matrix -> . EYE ( int_sequence )
    (31) matrix -> . ZEROS ( int_sequence )
    (32) matrix -> . ONES ( int_sequence )
    (33) matrix -> . [ matrix_row ]
    (52) un_op -> . expression '
    (53) un_op -> . - expression
    (38) bin_op -> . expression + expression
    (39) bin_op -> . expression * expression
    (40) bin_op -> . expression - expression
    (41) bin_op -> . expression / expression
    (42) bin_op -> . expression DOTADD expression
    (43) bin_op -> . expression DOTSUB expression
    (44) bin_op -> . expression DOTMUL expression
    (45) bin_op -> . expression DOTDIV expression
    (46) logic_op -> . expression EQ expression
    (47) logic_op -> . expression NEQ expression
    (48) logic_op -> . expression > expression
    (49) logic_op -> . expression < expression
    (50) logic_op -> . expression LE expression
    (51) logic_op -> . expression GE expression
    (29) matrix_access -> . ID [ int_sequence ]

    (               shift and go to state 44
    ID              shift and go to state 15
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STRING          shift and go to state 47
    EYE             shift and go to state 48
    ZEROS           shift and go to state 49
    ONES            shift and go to state 50
    [               shift and go to state 51
    -               shift and go to state 52

    expression                     shift and go to state 113
    variable                       shift and go to state 38
    constant                       shift and go to state 39
    matrix                         shift and go to state 40
    un_op                          shift and go to state 41
    bin_op                         shift and go to state 42
    logic_op                       shift and go to state 43
    matrix_access                  shift and go to state 16

state 81

    (51) logic_op -> expression GE . expression
    (14) expression -> . variable
    (15) expression -> . constant
    (16) expression -> . matrix
    (17) expression -> . un_op
    (18) expression -> . bin_op
    (19) expression -> . logic_op
    (20) expression -> . ( expression )
    (24) variable -> . ID
    (25) variable -> . matrix_access
    (21) constant -> . INTNUM
    (22) constant -> . FLOATNUM
    (23) constant -> . STRING
    (30) matrix -> . EYE ( int_sequence )
    (31) matrix -> . ZEROS ( int_sequence )
    (32) matrix -> . ONES ( int_sequence )
    (33) matrix -> . [ matrix_row ]
    (52) un_op -> . expression '
    (53) un_op -> . - expression
    (38) bin_op -> . expression + expression
    (39) bin_op -> . expression * expression
    (40) bin_op -> . expression - expression
    (41) bin_op -> . expression / expression
    (42) bin_op -> . expression DOTADD expression
    (43) bin_op -> . expression DOTSUB expression
    (44) bin_op -> . expression DOTMUL expression
    (45) bin_op -> . expression DOTDIV expression
    (46) logic_op -> . expression EQ expression
    (47) logic_op -> . expression NEQ expression
    (48) logic_op -> . expression > expression
    (49) logic_op -> . expression < expression
    (50) logic_op -> . expression LE expression
    (51) logic_op -> . expression GE expression
    (29) matrix_access -> . ID [ int_sequence ]

    (               shift and go to state 44
    ID              shift and go to state 15
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STRING          shift and go to state 47
    EYE             shift and go to state 48
    ZEROS           shift and go to state 49
    ONES            shift and go to state 50
    [               shift and go to state 51
    -               shift and go to state 52

    expression                     shift and go to state 114
    variable                       shift and go to state 38
    constant                       shift and go to state 39
    matrix                         shift and go to state 40
    un_op                          shift and go to state 41
    bin_op                         shift and go to state 42
    logic_op                       shift and go to state 43
    matrix_access                  shift and go to state 16

state 82

    (20) expression -> ( expression . )
    (52) un_op -> expression . '
    (38) bin_op -> expression . + expression
    (39) bin_op -> expression . * expression
    (40) bin_op -> expression . - expression
    (41) bin_op -> expression . / expression
    (42) bin_op -> expression . DOTADD expression
    (43) bin_op -> expression . DOTSUB expression
    (44) bin_op -> expression . DOTMUL expression
    (45) bin_op -> expression . DOTDIV expression
    (46) logic_op -> expression . EQ expression
    (47) logic_op -> expression . NEQ expression
    (48) logic_op -> expression . > expression
    (49) logic_op -> expression . < expression
    (50) logic_op -> expression . LE expression
    (51) logic_op -> expression . GE expression

    )               shift and go to state 115
    '               shift and go to state 67
    +               shift and go to state 68
    *               shift and go to state 69
    -               shift and go to state 70
    /               shift and go to state 71
    DOTADD          shift and go to state 72
    DOTSUB          shift and go to state 73
    DOTMUL          shift and go to state 74
    DOTDIV          shift and go to state 75
    EQ              shift and go to state 76
    NEQ             shift and go to state 77
    >               shift and go to state 78
    <               shift and go to state 79
    LE              shift and go to state 80
    GE              shift and go to state 81


state 83

    (30) matrix -> EYE ( . int_sequence )
    (34) int_sequence -> . int_sequence , INTNUM
    (35) int_sequence -> . INTNUM

    INTNUM          shift and go to state 61

    int_sequence                   shift and go to state 116

state 84

    (31) matrix -> ZEROS ( . int_sequence )
    (34) int_sequence -> . int_sequence , INTNUM
    (35) int_sequence -> . INTNUM

    INTNUM          shift and go to state 61

    int_sequence                   shift and go to state 117

state 85

    (32) matrix -> ONES ( . int_sequence )
    (34) int_sequence -> . int_sequence , INTNUM
    (35) int_sequence -> . INTNUM

    INTNUM          shift and go to state 61

    int_sequence                   shift and go to state 118

state 86

    (33) matrix -> [ matrix_row . ]
    (36) matrix_row -> matrix_row . , value

    ]               shift and go to state 119
    ,               shift and go to state 120


state 87

    (37) matrix_row -> value .

    ]               reduce using rule 37 (matrix_row -> value .)
    ,               reduce using rule 37 (matrix_row -> value .)


state 88

    (26) value -> variable .

    ]               reduce using rule 26 (value -> variable .)
    ,               reduce using rule 26 (value -> variable .)


state 89

    (27) value -> matrix .

    ]               reduce using rule 27 (value -> matrix .)
    ,               reduce using rule 27 (value -> matrix .)


state 90

    (28) value -> constant .

    ]               reduce using rule 28 (value -> constant .)
    ,               reduce using rule 28 (value -> constant .)


state 91

    (53) un_op -> - expression .
    (52) un_op -> expression . '
    (38) bin_op -> expression . + expression
    (39) bin_op -> expression . * expression
    (40) bin_op -> expression . - expression
    (41) bin_op -> expression . / expression
    (42) bin_op -> expression . DOTADD expression
    (43) bin_op -> expression . DOTSUB expression
    (44) bin_op -> expression . DOTMUL expression
    (45) bin_op -> expression . DOTDIV expression
    (46) logic_op -> expression . EQ expression
    (47) logic_op -> expression . NEQ expression
    (48) logic_op -> expression . > expression
    (49) logic_op -> expression . < expression
    (50) logic_op -> expression . LE expression
    (51) logic_op -> expression . GE expression

    ;               reduce using rule 53 (un_op -> - expression .)
    +               reduce using rule 53 (un_op -> - expression .)
    *               reduce using rule 53 (un_op -> - expression .)
    -               reduce using rule 53 (un_op -> - expression .)
    /               reduce using rule 53 (un_op -> - expression .)
    DOTADD          reduce using rule 53 (un_op -> - expression .)
    DOTSUB          reduce using rule 53 (un_op -> - expression .)
    DOTMUL          reduce using rule 53 (un_op -> - expression .)
    DOTDIV          reduce using rule 53 (un_op -> - expression .)
    EQ              reduce using rule 53 (un_op -> - expression .)
    NEQ             reduce using rule 53 (un_op -> - expression .)
    >               reduce using rule 53 (un_op -> - expression .)
    <               reduce using rule 53 (un_op -> - expression .)
    LE              reduce using rule 53 (un_op -> - expression .)
    GE              reduce using rule 53 (un_op -> - expression .)
    ,               reduce using rule 53 (un_op -> - expression .)
    )               reduce using rule 53 (un_op -> - expression .)
    :               reduce using rule 53 (un_op -> - expression .)
    {               reduce using rule 53 (un_op -> - expression .)
    ID              reduce using rule 53 (un_op -> - expression .)
    IF              reduce using rule 53 (un_op -> - expression .)
    WHILE           reduce using rule 53 (un_op -> - expression .)
    FOR             reduce using rule 53 (un_op -> - expression .)
    RETURN          reduce using rule 53 (un_op -> - expression .)
    BREAK           reduce using rule 53 (un_op -> - expression .)
    CONTINUE        reduce using rule 53 (un_op -> - expression .)
    PRINT           reduce using rule 53 (un_op -> - expression .)
    '               shift and go to state 67

  ! '               [ reduce using rule 53 (un_op -> - expression .) ]
  ! +               [ shift and go to state 68 ]
  ! *               [ shift and go to state 69 ]
  ! -               [ shift and go to state 70 ]
  ! /               [ shift and go to state 71 ]
  ! DOTADD          [ shift and go to state 72 ]
  ! DOTSUB          [ shift and go to state 73 ]
  ! DOTMUL          [ shift and go to state 74 ]
  ! DOTDIV          [ shift and go to state 75 ]
  ! EQ              [ shift and go to state 76 ]
  ! NEQ             [ shift and go to state 77 ]
  ! >               [ shift and go to state 78 ]
  ! <               [ shift and go to state 79 ]
  ! LE              [ shift and go to state 80 ]
  ! GE              [ shift and go to state 81 ]


state 92

    (70) print_instr -> PRINT instructions_to_print ; .

    {               reduce using rule 70 (print_instr -> PRINT instructions_to_print ; .)
    ID              reduce using rule 70 (print_instr -> PRINT instructions_to_print ; .)
    IF              reduce using rule 70 (print_instr -> PRINT instructions_to_print ; .)
    WHILE           reduce using rule 70 (print_instr -> PRINT instructions_to_print ; .)
    FOR             reduce using rule 70 (print_instr -> PRINT instructions_to_print ; .)
    RETURN          reduce using rule 70 (print_instr -> PRINT instructions_to_print ; .)
    BREAK           reduce using rule 70 (print_instr -> PRINT instructions_to_print ; .)
    CONTINUE        reduce using rule 70 (print_instr -> PRINT instructions_to_print ; .)
    PRINT           reduce using rule 70 (print_instr -> PRINT instructions_to_print ; .)
    $end            reduce using rule 70 (print_instr -> PRINT instructions_to_print ; .)
    }               reduce using rule 70 (print_instr -> PRINT instructions_to_print ; .)
    ELSE            reduce using rule 70 (print_instr -> PRINT instructions_to_print ; .)


state 93

    (71) instructions_to_print -> instructions_to_print , . expression
    (14) expression -> . variable
    (15) expression -> . constant
    (16) expression -> . matrix
    (17) expression -> . un_op
    (18) expression -> . bin_op
    (19) expression -> . logic_op
    (20) expression -> . ( expression )
    (24) variable -> . ID
    (25) variable -> . matrix_access
    (21) constant -> . INTNUM
    (22) constant -> . FLOATNUM
    (23) constant -> . STRING
    (30) matrix -> . EYE ( int_sequence )
    (31) matrix -> . ZEROS ( int_sequence )
    (32) matrix -> . ONES ( int_sequence )
    (33) matrix -> . [ matrix_row ]
    (52) un_op -> . expression '
    (53) un_op -> . - expression
    (38) bin_op -> . expression + expression
    (39) bin_op -> . expression * expression
    (40) bin_op -> . expression - expression
    (41) bin_op -> . expression / expression
    (42) bin_op -> . expression DOTADD expression
    (43) bin_op -> . expression DOTSUB expression
    (44) bin_op -> . expression DOTMUL expression
    (45) bin_op -> . expression DOTDIV expression
    (46) logic_op -> . expression EQ expression
    (47) logic_op -> . expression NEQ expression
    (48) logic_op -> . expression > expression
    (49) logic_op -> . expression < expression
    (50) logic_op -> . expression LE expression
    (51) logic_op -> . expression GE expression
    (29) matrix_access -> . ID [ int_sequence ]

    (               shift and go to state 44
    ID              shift and go to state 15
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STRING          shift and go to state 47
    EYE             shift and go to state 48
    ZEROS           shift and go to state 49
    ONES            shift and go to state 50
    [               shift and go to state 51
    -               shift and go to state 52

    expression                     shift and go to state 121
    variable                       shift and go to state 38
    constant                       shift and go to state 39
    matrix                         shift and go to state 40
    un_op                          shift and go to state 41
    bin_op                         shift and go to state 42
    logic_op                       shift and go to state 43
    matrix_access                  shift and go to state 16

state 94

    (5) statements -> statements { statements } .

    {               reduce using rule 5 (statements -> statements { statements } .)
    ID              reduce using rule 5 (statements -> statements { statements } .)
    IF              reduce using rule 5 (statements -> statements { statements } .)
    WHILE           reduce using rule 5 (statements -> statements { statements } .)
    FOR             reduce using rule 5 (statements -> statements { statements } .)
    RETURN          reduce using rule 5 (statements -> statements { statements } .)
    BREAK           reduce using rule 5 (statements -> statements { statements } .)
    CONTINUE        reduce using rule 5 (statements -> statements { statements } .)
    PRINT           reduce using rule 5 (statements -> statements { statements } .)
    $end            reduce using rule 5 (statements -> statements { statements } .)
    }               reduce using rule 5 (statements -> statements { statements } .)


state 95

    (8) assignment -> variable assignment_op expression ; .

    {               reduce using rule 8 (assignment -> variable assignment_op expression ; .)
    ID              reduce using rule 8 (assignment -> variable assignment_op expression ; .)
    IF              reduce using rule 8 (assignment -> variable assignment_op expression ; .)
    WHILE           reduce using rule 8 (assignment -> variable assignment_op expression ; .)
    FOR             reduce using rule 8 (assignment -> variable assignment_op expression ; .)
    RETURN          reduce using rule 8 (assignment -> variable assignment_op expression ; .)
    BREAK           reduce using rule 8 (assignment -> variable assignment_op expression ; .)
    CONTINUE        reduce using rule 8 (assignment -> variable assignment_op expression ; .)
    PRINT           reduce using rule 8 (assignment -> variable assignment_op expression ; .)
    $end            reduce using rule 8 (assignment -> variable assignment_op expression ; .)
    }               reduce using rule 8 (assignment -> variable assignment_op expression ; .)
    ELSE            reduce using rule 8 (assignment -> variable assignment_op expression ; .)


state 96

    (29) matrix_access -> ID [ int_sequence ] .

    =               reduce using rule 29 (matrix_access -> ID [ int_sequence ] .)
    ADDASSIGN       reduce using rule 29 (matrix_access -> ID [ int_sequence ] .)
    SUBASSIGN       reduce using rule 29 (matrix_access -> ID [ int_sequence ] .)
    MULASSIGN       reduce using rule 29 (matrix_access -> ID [ int_sequence ] .)
    DIVASSIGN       reduce using rule 29 (matrix_access -> ID [ int_sequence ] .)
    ;               reduce using rule 29 (matrix_access -> ID [ int_sequence ] .)
    '               reduce using rule 29 (matrix_access -> ID [ int_sequence ] .)
    +               reduce using rule 29 (matrix_access -> ID [ int_sequence ] .)
    *               reduce using rule 29 (matrix_access -> ID [ int_sequence ] .)
    -               reduce using rule 29 (matrix_access -> ID [ int_sequence ] .)
    /               reduce using rule 29 (matrix_access -> ID [ int_sequence ] .)
    DOTADD          reduce using rule 29 (matrix_access -> ID [ int_sequence ] .)
    DOTSUB          reduce using rule 29 (matrix_access -> ID [ int_sequence ] .)
    DOTMUL          reduce using rule 29 (matrix_access -> ID [ int_sequence ] .)
    DOTDIV          reduce using rule 29 (matrix_access -> ID [ int_sequence ] .)
    EQ              reduce using rule 29 (matrix_access -> ID [ int_sequence ] .)
    NEQ             reduce using rule 29 (matrix_access -> ID [ int_sequence ] .)
    >               reduce using rule 29 (matrix_access -> ID [ int_sequence ] .)
    <               reduce using rule 29 (matrix_access -> ID [ int_sequence ] .)
    LE              reduce using rule 29 (matrix_access -> ID [ int_sequence ] .)
    GE              reduce using rule 29 (matrix_access -> ID [ int_sequence ] .)
    ,               reduce using rule 29 (matrix_access -> ID [ int_sequence ] .)
    )               reduce using rule 29 (matrix_access -> ID [ int_sequence ] .)
    ]               reduce using rule 29 (matrix_access -> ID [ int_sequence ] .)
    :               reduce using rule 29 (matrix_access -> ID [ int_sequence ] .)
    {               reduce using rule 29 (matrix_access -> ID [ int_sequence ] .)
    ID              reduce using rule 29 (matrix_access -> ID [ int_sequence ] .)
    IF              reduce using rule 29 (matrix_access -> ID [ int_sequence ] .)
    WHILE           reduce using rule 29 (matrix_access -> ID [ int_sequence ] .)
    FOR             reduce using rule 29 (matrix_access -> ID [ int_sequence ] .)
    RETURN          reduce using rule 29 (matrix_access -> ID [ int_sequence ] .)
    BREAK           reduce using rule 29 (matrix_access -> ID [ int_sequence ] .)
    CONTINUE        reduce using rule 29 (matrix_access -> ID [ int_sequence ] .)
    PRINT           reduce using rule 29 (matrix_access -> ID [ int_sequence ] .)


state 97

    (34) int_sequence -> int_sequence , . INTNUM

    INTNUM          shift and go to state 122


state 98

    (61) conditional_statement -> IF ( logic_op ) . conditional_instructions
    (62) conditional_statement -> IF ( logic_op ) . conditional_instructions ELSE conditional_instructions
    (63) conditional_instructions -> . statement
    (64) conditional_instructions -> . { statements }
    (6) statement -> . assignment
    (7) statement -> . flow_control
    (8) assignment -> . variable assignment_op expression ;
    (54) flow_control -> . conditional_statement
    (55) flow_control -> . while_loop
    (56) flow_control -> . for_loop
    (57) flow_control -> . return_instr
    (58) flow_control -> . break_instr
    (59) flow_control -> . continue_instr
    (60) flow_control -> . print_instr
    (24) variable -> . ID
    (25) variable -> . matrix_access
    (61) conditional_statement -> . IF ( logic_op ) conditional_instructions
    (62) conditional_statement -> . IF ( logic_op ) conditional_instructions ELSE conditional_instructions
    (65) while_loop -> . WHILE ( logic_op ) conditional_instructions
    (66) for_loop -> . FOR ID = expression : expression conditional_instructions
    (67) return_instr -> . RETURN expression ;
    (69) break_instr -> . BREAK ;
    (68) continue_instr -> . CONTINUE ;
    (70) print_instr -> . PRINT instructions_to_print ;
    (29) matrix_access -> . ID [ int_sequence ]

    {               shift and go to state 125
    ID              shift and go to state 15
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    RETURN          shift and go to state 20
    BREAK           shift and go to state 21
    CONTINUE        shift and go to state 22
    PRINT           shift and go to state 23

    conditional_instructions       shift and go to state 123
    statement                      shift and go to state 124
    assignment                     shift and go to state 5
    flow_control                   shift and go to state 6
    variable                       shift and go to state 7
    conditional_statement          shift and go to state 8
    while_loop                     shift and go to state 9
    for_loop                       shift and go to state 10
    return_instr                   shift and go to state 11
    break_instr                    shift and go to state 12
    continue_instr                 shift and go to state 13
    print_instr                    shift and go to state 14
    matrix_access                  shift and go to state 16

state 99

    (65) while_loop -> WHILE ( logic_op ) . conditional_instructions
    (63) conditional_instructions -> . statement
    (64) conditional_instructions -> . { statements }
    (6) statement -> . assignment
    (7) statement -> . flow_control
    (8) assignment -> . variable assignment_op expression ;
    (54) flow_control -> . conditional_statement
    (55) flow_control -> . while_loop
    (56) flow_control -> . for_loop
    (57) flow_control -> . return_instr
    (58) flow_control -> . break_instr
    (59) flow_control -> . continue_instr
    (60) flow_control -> . print_instr
    (24) variable -> . ID
    (25) variable -> . matrix_access
    (61) conditional_statement -> . IF ( logic_op ) conditional_instructions
    (62) conditional_statement -> . IF ( logic_op ) conditional_instructions ELSE conditional_instructions
    (65) while_loop -> . WHILE ( logic_op ) conditional_instructions
    (66) for_loop -> . FOR ID = expression : expression conditional_instructions
    (67) return_instr -> . RETURN expression ;
    (69) break_instr -> . BREAK ;
    (68) continue_instr -> . CONTINUE ;
    (70) print_instr -> . PRINT instructions_to_print ;
    (29) matrix_access -> . ID [ int_sequence ]

    {               shift and go to state 125
    ID              shift and go to state 15
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    RETURN          shift and go to state 20
    BREAK           shift and go to state 21
    CONTINUE        shift and go to state 22
    PRINT           shift and go to state 23

    conditional_instructions       shift and go to state 126
    statement                      shift and go to state 124
    assignment                     shift and go to state 5
    flow_control                   shift and go to state 6
    variable                       shift and go to state 7
    conditional_statement          shift and go to state 8
    while_loop                     shift and go to state 9
    for_loop                       shift and go to state 10
    return_instr                   shift and go to state 11
    break_instr                    shift and go to state 12
    continue_instr                 shift and go to state 13
    print_instr                    shift and go to state 14
    matrix_access                  shift and go to state 16

state 100

    (66) for_loop -> FOR ID = expression . : expression conditional_instructions
    (52) un_op -> expression . '
    (38) bin_op -> expression . + expression
    (39) bin_op -> expression . * expression
    (40) bin_op -> expression . - expression
    (41) bin_op -> expression . / expression
    (42) bin_op -> expression . DOTADD expression
    (43) bin_op -> expression . DOTSUB expression
    (44) bin_op -> expression . DOTMUL expression
    (45) bin_op -> expression . DOTDIV expression
    (46) logic_op -> expression . EQ expression
    (47) logic_op -> expression . NEQ expression
    (48) logic_op -> expression . > expression
    (49) logic_op -> expression . < expression
    (50) logic_op -> expression . LE expression
    (51) logic_op -> expression . GE expression

    :               shift and go to state 127
    '               shift and go to state 67
    +               shift and go to state 68
    *               shift and go to state 69
    -               shift and go to state 70
    /               shift and go to state 71
    DOTADD          shift and go to state 72
    DOTSUB          shift and go to state 73
    DOTMUL          shift and go to state 74
    DOTDIV          shift and go to state 75
    EQ              shift and go to state 76
    NEQ             shift and go to state 77
    >               shift and go to state 78
    <               shift and go to state 79
    LE              shift and go to state 80
    GE              shift and go to state 81


state 101

    (38) bin_op -> expression + expression .
    (52) un_op -> expression . '
    (38) bin_op -> expression . + expression
    (39) bin_op -> expression . * expression
    (40) bin_op -> expression . - expression
    (41) bin_op -> expression . / expression
    (42) bin_op -> expression . DOTADD expression
    (43) bin_op -> expression . DOTSUB expression
    (44) bin_op -> expression . DOTMUL expression
    (45) bin_op -> expression . DOTDIV expression
    (46) logic_op -> expression . EQ expression
    (47) logic_op -> expression . NEQ expression
    (48) logic_op -> expression . > expression
    (49) logic_op -> expression . < expression
    (50) logic_op -> expression . LE expression
    (51) logic_op -> expression . GE expression

    ;               reduce using rule 38 (bin_op -> expression + expression .)
    +               reduce using rule 38 (bin_op -> expression + expression .)
    -               reduce using rule 38 (bin_op -> expression + expression .)
    DOTADD          reduce using rule 38 (bin_op -> expression + expression .)
    DOTSUB          reduce using rule 38 (bin_op -> expression + expression .)
    EQ              reduce using rule 38 (bin_op -> expression + expression .)
    NEQ             reduce using rule 38 (bin_op -> expression + expression .)
    >               reduce using rule 38 (bin_op -> expression + expression .)
    <               reduce using rule 38 (bin_op -> expression + expression .)
    LE              reduce using rule 38 (bin_op -> expression + expression .)
    GE              reduce using rule 38 (bin_op -> expression + expression .)
    ,               reduce using rule 38 (bin_op -> expression + expression .)
    )               reduce using rule 38 (bin_op -> expression + expression .)
    :               reduce using rule 38 (bin_op -> expression + expression .)
    {               reduce using rule 38 (bin_op -> expression + expression .)
    ID              reduce using rule 38 (bin_op -> expression + expression .)
    IF              reduce using rule 38 (bin_op -> expression + expression .)
    WHILE           reduce using rule 38 (bin_op -> expression + expression .)
    FOR             reduce using rule 38 (bin_op -> expression + expression .)
    RETURN          reduce using rule 38 (bin_op -> expression + expression .)
    BREAK           reduce using rule 38 (bin_op -> expression + expression .)
    CONTINUE        reduce using rule 38 (bin_op -> expression + expression .)
    PRINT           reduce using rule 38 (bin_op -> expression + expression .)
    '               shift and go to state 67
    *               shift and go to state 69
    /               shift and go to state 71
    DOTMUL          shift and go to state 74
    DOTDIV          shift and go to state 75

  ! '               [ reduce using rule 38 (bin_op -> expression + expression .) ]
  ! *               [ reduce using rule 38 (bin_op -> expression + expression .) ]
  ! /               [ reduce using rule 38 (bin_op -> expression + expression .) ]
  ! DOTMUL          [ reduce using rule 38 (bin_op -> expression + expression .) ]
  ! DOTDIV          [ reduce using rule 38 (bin_op -> expression + expression .) ]
  ! +               [ shift and go to state 68 ]
  ! -               [ shift and go to state 70 ]
  ! DOTADD          [ shift and go to state 72 ]
  ! DOTSUB          [ shift and go to state 73 ]
  ! EQ              [ shift and go to state 76 ]
  ! NEQ             [ shift and go to state 77 ]
  ! >               [ shift and go to state 78 ]
  ! <               [ shift and go to state 79 ]
  ! LE              [ shift and go to state 80 ]
  ! GE              [ shift and go to state 81 ]


state 102

    (39) bin_op -> expression * expression .
    (52) un_op -> expression . '
    (38) bin_op -> expression . + expression
    (39) bin_op -> expression . * expression
    (40) bin_op -> expression . - expression
    (41) bin_op -> expression . / expression
    (42) bin_op -> expression . DOTADD expression
    (43) bin_op -> expression . DOTSUB expression
    (44) bin_op -> expression . DOTMUL expression
    (45) bin_op -> expression . DOTDIV expression
    (46) logic_op -> expression . EQ expression
    (47) logic_op -> expression . NEQ expression
    (48) logic_op -> expression . > expression
    (49) logic_op -> expression . < expression
    (50) logic_op -> expression . LE expression
    (51) logic_op -> expression . GE expression

    ;               reduce using rule 39 (bin_op -> expression * expression .)
    +               reduce using rule 39 (bin_op -> expression * expression .)
    *               reduce using rule 39 (bin_op -> expression * expression .)
    -               reduce using rule 39 (bin_op -> expression * expression .)
    /               reduce using rule 39 (bin_op -> expression * expression .)
    DOTADD          reduce using rule 39 (bin_op -> expression * expression .)
    DOTSUB          reduce using rule 39 (bin_op -> expression * expression .)
    DOTMUL          reduce using rule 39 (bin_op -> expression * expression .)
    DOTDIV          reduce using rule 39 (bin_op -> expression * expression .)
    EQ              reduce using rule 39 (bin_op -> expression * expression .)
    NEQ             reduce using rule 39 (bin_op -> expression * expression .)
    >               reduce using rule 39 (bin_op -> expression * expression .)
    <               reduce using rule 39 (bin_op -> expression * expression .)
    LE              reduce using rule 39 (bin_op -> expression * expression .)
    GE              reduce using rule 39 (bin_op -> expression * expression .)
    ,               reduce using rule 39 (bin_op -> expression * expression .)
    )               reduce using rule 39 (bin_op -> expression * expression .)
    :               reduce using rule 39 (bin_op -> expression * expression .)
    {               reduce using rule 39 (bin_op -> expression * expression .)
    ID              reduce using rule 39 (bin_op -> expression * expression .)
    IF              reduce using rule 39 (bin_op -> expression * expression .)
    WHILE           reduce using rule 39 (bin_op -> expression * expression .)
    FOR             reduce using rule 39 (bin_op -> expression * expression .)
    RETURN          reduce using rule 39 (bin_op -> expression * expression .)
    BREAK           reduce using rule 39 (bin_op -> expression * expression .)
    CONTINUE        reduce using rule 39 (bin_op -> expression * expression .)
    PRINT           reduce using rule 39 (bin_op -> expression * expression .)
    '               shift and go to state 67

  ! '               [ reduce using rule 39 (bin_op -> expression * expression .) ]
  ! +               [ shift and go to state 68 ]
  ! *               [ shift and go to state 69 ]
  ! -               [ shift and go to state 70 ]
  ! /               [ shift and go to state 71 ]
  ! DOTADD          [ shift and go to state 72 ]
  ! DOTSUB          [ shift and go to state 73 ]
  ! DOTMUL          [ shift and go to state 74 ]
  ! DOTDIV          [ shift and go to state 75 ]
  ! EQ              [ shift and go to state 76 ]
  ! NEQ             [ shift and go to state 77 ]
  ! >               [ shift and go to state 78 ]
  ! <               [ shift and go to state 79 ]
  ! LE              [ shift and go to state 80 ]
  ! GE              [ shift and go to state 81 ]


state 103

    (40) bin_op -> expression - expression .
    (52) un_op -> expression . '
    (38) bin_op -> expression . + expression
    (39) bin_op -> expression . * expression
    (40) bin_op -> expression . - expression
    (41) bin_op -> expression . / expression
    (42) bin_op -> expression . DOTADD expression
    (43) bin_op -> expression . DOTSUB expression
    (44) bin_op -> expression . DOTMUL expression
    (45) bin_op -> expression . DOTDIV expression
    (46) logic_op -> expression . EQ expression
    (47) logic_op -> expression . NEQ expression
    (48) logic_op -> expression . > expression
    (49) logic_op -> expression . < expression
    (50) logic_op -> expression . LE expression
    (51) logic_op -> expression . GE expression

    ;               reduce using rule 40 (bin_op -> expression - expression .)
    +               reduce using rule 40 (bin_op -> expression - expression .)
    -               reduce using rule 40 (bin_op -> expression - expression .)
    DOTADD          reduce using rule 40 (bin_op -> expression - expression .)
    DOTSUB          reduce using rule 40 (bin_op -> expression - expression .)
    EQ              reduce using rule 40 (bin_op -> expression - expression .)
    NEQ             reduce using rule 40 (bin_op -> expression - expression .)
    >               reduce using rule 40 (bin_op -> expression - expression .)
    <               reduce using rule 40 (bin_op -> expression - expression .)
    LE              reduce using rule 40 (bin_op -> expression - expression .)
    GE              reduce using rule 40 (bin_op -> expression - expression .)
    ,               reduce using rule 40 (bin_op -> expression - expression .)
    )               reduce using rule 40 (bin_op -> expression - expression .)
    :               reduce using rule 40 (bin_op -> expression - expression .)
    {               reduce using rule 40 (bin_op -> expression - expression .)
    ID              reduce using rule 40 (bin_op -> expression - expression .)
    IF              reduce using rule 40 (bin_op -> expression - expression .)
    WHILE           reduce using rule 40 (bin_op -> expression - expression .)
    FOR             reduce using rule 40 (bin_op -> expression - expression .)
    RETURN          reduce using rule 40 (bin_op -> expression - expression .)
    BREAK           reduce using rule 40 (bin_op -> expression - expression .)
    CONTINUE        reduce using rule 40 (bin_op -> expression - expression .)
    PRINT           reduce using rule 40 (bin_op -> expression - expression .)
    '               shift and go to state 67
    *               shift and go to state 69
    /               shift and go to state 71
    DOTMUL          shift and go to state 74
    DOTDIV          shift and go to state 75

  ! '               [ reduce using rule 40 (bin_op -> expression - expression .) ]
  ! *               [ reduce using rule 40 (bin_op -> expression - expression .) ]
  ! /               [ reduce using rule 40 (bin_op -> expression - expression .) ]
  ! DOTMUL          [ reduce using rule 40 (bin_op -> expression - expression .) ]
  ! DOTDIV          [ reduce using rule 40 (bin_op -> expression - expression .) ]
  ! +               [ shift and go to state 68 ]
  ! -               [ shift and go to state 70 ]
  ! DOTADD          [ shift and go to state 72 ]
  ! DOTSUB          [ shift and go to state 73 ]
  ! EQ              [ shift and go to state 76 ]
  ! NEQ             [ shift and go to state 77 ]
  ! >               [ shift and go to state 78 ]
  ! <               [ shift and go to state 79 ]
  ! LE              [ shift and go to state 80 ]
  ! GE              [ shift and go to state 81 ]


state 104

    (41) bin_op -> expression / expression .
    (52) un_op -> expression . '
    (38) bin_op -> expression . + expression
    (39) bin_op -> expression . * expression
    (40) bin_op -> expression . - expression
    (41) bin_op -> expression . / expression
    (42) bin_op -> expression . DOTADD expression
    (43) bin_op -> expression . DOTSUB expression
    (44) bin_op -> expression . DOTMUL expression
    (45) bin_op -> expression . DOTDIV expression
    (46) logic_op -> expression . EQ expression
    (47) logic_op -> expression . NEQ expression
    (48) logic_op -> expression . > expression
    (49) logic_op -> expression . < expression
    (50) logic_op -> expression . LE expression
    (51) logic_op -> expression . GE expression

    ;               reduce using rule 41 (bin_op -> expression / expression .)
    +               reduce using rule 41 (bin_op -> expression / expression .)
    *               reduce using rule 41 (bin_op -> expression / expression .)
    -               reduce using rule 41 (bin_op -> expression / expression .)
    /               reduce using rule 41 (bin_op -> expression / expression .)
    DOTADD          reduce using rule 41 (bin_op -> expression / expression .)
    DOTSUB          reduce using rule 41 (bin_op -> expression / expression .)
    DOTMUL          reduce using rule 41 (bin_op -> expression / expression .)
    DOTDIV          reduce using rule 41 (bin_op -> expression / expression .)
    EQ              reduce using rule 41 (bin_op -> expression / expression .)
    NEQ             reduce using rule 41 (bin_op -> expression / expression .)
    >               reduce using rule 41 (bin_op -> expression / expression .)
    <               reduce using rule 41 (bin_op -> expression / expression .)
    LE              reduce using rule 41 (bin_op -> expression / expression .)
    GE              reduce using rule 41 (bin_op -> expression / expression .)
    ,               reduce using rule 41 (bin_op -> expression / expression .)
    )               reduce using rule 41 (bin_op -> expression / expression .)
    :               reduce using rule 41 (bin_op -> expression / expression .)
    {               reduce using rule 41 (bin_op -> expression / expression .)
    ID              reduce using rule 41 (bin_op -> expression / expression .)
    IF              reduce using rule 41 (bin_op -> expression / expression .)
    WHILE           reduce using rule 41 (bin_op -> expression / expression .)
    FOR             reduce using rule 41 (bin_op -> expression / expression .)
    RETURN          reduce using rule 41 (bin_op -> expression / expression .)
    BREAK           reduce using rule 41 (bin_op -> expression / expression .)
    CONTINUE        reduce using rule 41 (bin_op -> expression / expression .)
    PRINT           reduce using rule 41 (bin_op -> expression / expression .)
    '               shift and go to state 67

  ! '               [ reduce using rule 41 (bin_op -> expression / expression .) ]
  ! +               [ shift and go to state 68 ]
  ! *               [ shift and go to state 69 ]
  ! -               [ shift and go to state 70 ]
  ! /               [ shift and go to state 71 ]
  ! DOTADD          [ shift and go to state 72 ]
  ! DOTSUB          [ shift and go to state 73 ]
  ! DOTMUL          [ shift and go to state 74 ]
  ! DOTDIV          [ shift and go to state 75 ]
  ! EQ              [ shift and go to state 76 ]
  ! NEQ             [ shift and go to state 77 ]
  ! >               [ shift and go to state 78 ]
  ! <               [ shift and go to state 79 ]
  ! LE              [ shift and go to state 80 ]
  ! GE              [ shift and go to state 81 ]


state 105

    (42) bin_op -> expression DOTADD expression .
    (52) un_op -> expression . '
    (38) bin_op -> expression . + expression
    (39) bin_op -> expression . * expression
    (40) bin_op -> expression . - expression
    (41) bin_op -> expression . / expression
    (42) bin_op -> expression . DOTADD expression
    (43) bin_op -> expression . DOTSUB expression
    (44) bin_op -> expression . DOTMUL expression
    (45) bin_op -> expression . DOTDIV expression
    (46) logic_op -> expression . EQ expression
    (47) logic_op -> expression . NEQ expression
    (48) logic_op -> expression . > expression
    (49) logic_op -> expression . < expression
    (50) logic_op -> expression . LE expression
    (51) logic_op -> expression . GE expression

    ;               reduce using rule 42 (bin_op -> expression DOTADD expression .)
    +               reduce using rule 42 (bin_op -> expression DOTADD expression .)
    -               reduce using rule 42 (bin_op -> expression DOTADD expression .)
    DOTADD          reduce using rule 42 (bin_op -> expression DOTADD expression .)
    DOTSUB          reduce using rule 42 (bin_op -> expression DOTADD expression .)
    EQ              reduce using rule 42 (bin_op -> expression DOTADD expression .)
    NEQ             reduce using rule 42 (bin_op -> expression DOTADD expression .)
    >               reduce using rule 42 (bin_op -> expression DOTADD expression .)
    <               reduce using rule 42 (bin_op -> expression DOTADD expression .)
    LE              reduce using rule 42 (bin_op -> expression DOTADD expression .)
    GE              reduce using rule 42 (bin_op -> expression DOTADD expression .)
    ,               reduce using rule 42 (bin_op -> expression DOTADD expression .)
    )               reduce using rule 42 (bin_op -> expression DOTADD expression .)
    :               reduce using rule 42 (bin_op -> expression DOTADD expression .)
    {               reduce using rule 42 (bin_op -> expression DOTADD expression .)
    ID              reduce using rule 42 (bin_op -> expression DOTADD expression .)
    IF              reduce using rule 42 (bin_op -> expression DOTADD expression .)
    WHILE           reduce using rule 42 (bin_op -> expression DOTADD expression .)
    FOR             reduce using rule 42 (bin_op -> expression DOTADD expression .)
    RETURN          reduce using rule 42 (bin_op -> expression DOTADD expression .)
    BREAK           reduce using rule 42 (bin_op -> expression DOTADD expression .)
    CONTINUE        reduce using rule 42 (bin_op -> expression DOTADD expression .)
    PRINT           reduce using rule 42 (bin_op -> expression DOTADD expression .)
    '               shift and go to state 67
    *               shift and go to state 69
    /               shift and go to state 71
    DOTMUL          shift and go to state 74
    DOTDIV          shift and go to state 75

  ! '               [ reduce using rule 42 (bin_op -> expression DOTADD expression .) ]
  ! *               [ reduce using rule 42 (bin_op -> expression DOTADD expression .) ]
  ! /               [ reduce using rule 42 (bin_op -> expression DOTADD expression .) ]
  ! DOTMUL          [ reduce using rule 42 (bin_op -> expression DOTADD expression .) ]
  ! DOTDIV          [ reduce using rule 42 (bin_op -> expression DOTADD expression .) ]
  ! +               [ shift and go to state 68 ]
  ! -               [ shift and go to state 70 ]
  ! DOTADD          [ shift and go to state 72 ]
  ! DOTSUB          [ shift and go to state 73 ]
  ! EQ              [ shift and go to state 76 ]
  ! NEQ             [ shift and go to state 77 ]
  ! >               [ shift and go to state 78 ]
  ! <               [ shift and go to state 79 ]
  ! LE              [ shift and go to state 80 ]
  ! GE              [ shift and go to state 81 ]


state 106

    (43) bin_op -> expression DOTSUB expression .
    (52) un_op -> expression . '
    (38) bin_op -> expression . + expression
    (39) bin_op -> expression . * expression
    (40) bin_op -> expression . - expression
    (41) bin_op -> expression . / expression
    (42) bin_op -> expression . DOTADD expression
    (43) bin_op -> expression . DOTSUB expression
    (44) bin_op -> expression . DOTMUL expression
    (45) bin_op -> expression . DOTDIV expression
    (46) logic_op -> expression . EQ expression
    (47) logic_op -> expression . NEQ expression
    (48) logic_op -> expression . > expression
    (49) logic_op -> expression . < expression
    (50) logic_op -> expression . LE expression
    (51) logic_op -> expression . GE expression

    ;               reduce using rule 43 (bin_op -> expression DOTSUB expression .)
    +               reduce using rule 43 (bin_op -> expression DOTSUB expression .)
    -               reduce using rule 43 (bin_op -> expression DOTSUB expression .)
    DOTADD          reduce using rule 43 (bin_op -> expression DOTSUB expression .)
    DOTSUB          reduce using rule 43 (bin_op -> expression DOTSUB expression .)
    EQ              reduce using rule 43 (bin_op -> expression DOTSUB expression .)
    NEQ             reduce using rule 43 (bin_op -> expression DOTSUB expression .)
    >               reduce using rule 43 (bin_op -> expression DOTSUB expression .)
    <               reduce using rule 43 (bin_op -> expression DOTSUB expression .)
    LE              reduce using rule 43 (bin_op -> expression DOTSUB expression .)
    GE              reduce using rule 43 (bin_op -> expression DOTSUB expression .)
    ,               reduce using rule 43 (bin_op -> expression DOTSUB expression .)
    )               reduce using rule 43 (bin_op -> expression DOTSUB expression .)
    :               reduce using rule 43 (bin_op -> expression DOTSUB expression .)
    {               reduce using rule 43 (bin_op -> expression DOTSUB expression .)
    ID              reduce using rule 43 (bin_op -> expression DOTSUB expression .)
    IF              reduce using rule 43 (bin_op -> expression DOTSUB expression .)
    WHILE           reduce using rule 43 (bin_op -> expression DOTSUB expression .)
    FOR             reduce using rule 43 (bin_op -> expression DOTSUB expression .)
    RETURN          reduce using rule 43 (bin_op -> expression DOTSUB expression .)
    BREAK           reduce using rule 43 (bin_op -> expression DOTSUB expression .)
    CONTINUE        reduce using rule 43 (bin_op -> expression DOTSUB expression .)
    PRINT           reduce using rule 43 (bin_op -> expression DOTSUB expression .)
    '               shift and go to state 67
    *               shift and go to state 69
    /               shift and go to state 71
    DOTMUL          shift and go to state 74
    DOTDIV          shift and go to state 75

  ! '               [ reduce using rule 43 (bin_op -> expression DOTSUB expression .) ]
  ! *               [ reduce using rule 43 (bin_op -> expression DOTSUB expression .) ]
  ! /               [ reduce using rule 43 (bin_op -> expression DOTSUB expression .) ]
  ! DOTMUL          [ reduce using rule 43 (bin_op -> expression DOTSUB expression .) ]
  ! DOTDIV          [ reduce using rule 43 (bin_op -> expression DOTSUB expression .) ]
  ! +               [ shift and go to state 68 ]
  ! -               [ shift and go to state 70 ]
  ! DOTADD          [ shift and go to state 72 ]
  ! DOTSUB          [ shift and go to state 73 ]
  ! EQ              [ shift and go to state 76 ]
  ! NEQ             [ shift and go to state 77 ]
  ! >               [ shift and go to state 78 ]
  ! <               [ shift and go to state 79 ]
  ! LE              [ shift and go to state 80 ]
  ! GE              [ shift and go to state 81 ]


state 107

    (44) bin_op -> expression DOTMUL expression .
    (52) un_op -> expression . '
    (38) bin_op -> expression . + expression
    (39) bin_op -> expression . * expression
    (40) bin_op -> expression . - expression
    (41) bin_op -> expression . / expression
    (42) bin_op -> expression . DOTADD expression
    (43) bin_op -> expression . DOTSUB expression
    (44) bin_op -> expression . DOTMUL expression
    (45) bin_op -> expression . DOTDIV expression
    (46) logic_op -> expression . EQ expression
    (47) logic_op -> expression . NEQ expression
    (48) logic_op -> expression . > expression
    (49) logic_op -> expression . < expression
    (50) logic_op -> expression . LE expression
    (51) logic_op -> expression . GE expression

    ;               reduce using rule 44 (bin_op -> expression DOTMUL expression .)
    +               reduce using rule 44 (bin_op -> expression DOTMUL expression .)
    *               reduce using rule 44 (bin_op -> expression DOTMUL expression .)
    -               reduce using rule 44 (bin_op -> expression DOTMUL expression .)
    /               reduce using rule 44 (bin_op -> expression DOTMUL expression .)
    DOTADD          reduce using rule 44 (bin_op -> expression DOTMUL expression .)
    DOTSUB          reduce using rule 44 (bin_op -> expression DOTMUL expression .)
    DOTMUL          reduce using rule 44 (bin_op -> expression DOTMUL expression .)
    DOTDIV          reduce using rule 44 (bin_op -> expression DOTMUL expression .)
    EQ              reduce using rule 44 (bin_op -> expression DOTMUL expression .)
    NEQ             reduce using rule 44 (bin_op -> expression DOTMUL expression .)
    >               reduce using rule 44 (bin_op -> expression DOTMUL expression .)
    <               reduce using rule 44 (bin_op -> expression DOTMUL expression .)
    LE              reduce using rule 44 (bin_op -> expression DOTMUL expression .)
    GE              reduce using rule 44 (bin_op -> expression DOTMUL expression .)
    ,               reduce using rule 44 (bin_op -> expression DOTMUL expression .)
    )               reduce using rule 44 (bin_op -> expression DOTMUL expression .)
    :               reduce using rule 44 (bin_op -> expression DOTMUL expression .)
    {               reduce using rule 44 (bin_op -> expression DOTMUL expression .)
    ID              reduce using rule 44 (bin_op -> expression DOTMUL expression .)
    IF              reduce using rule 44 (bin_op -> expression DOTMUL expression .)
    WHILE           reduce using rule 44 (bin_op -> expression DOTMUL expression .)
    FOR             reduce using rule 44 (bin_op -> expression DOTMUL expression .)
    RETURN          reduce using rule 44 (bin_op -> expression DOTMUL expression .)
    BREAK           reduce using rule 44 (bin_op -> expression DOTMUL expression .)
    CONTINUE        reduce using rule 44 (bin_op -> expression DOTMUL expression .)
    PRINT           reduce using rule 44 (bin_op -> expression DOTMUL expression .)
    '               shift and go to state 67

  ! '               [ reduce using rule 44 (bin_op -> expression DOTMUL expression .) ]
  ! +               [ shift and go to state 68 ]
  ! *               [ shift and go to state 69 ]
  ! -               [ shift and go to state 70 ]
  ! /               [ shift and go to state 71 ]
  ! DOTADD          [ shift and go to state 72 ]
  ! DOTSUB          [ shift and go to state 73 ]
  ! DOTMUL          [ shift and go to state 74 ]
  ! DOTDIV          [ shift and go to state 75 ]
  ! EQ              [ shift and go to state 76 ]
  ! NEQ             [ shift and go to state 77 ]
  ! >               [ shift and go to state 78 ]
  ! <               [ shift and go to state 79 ]
  ! LE              [ shift and go to state 80 ]
  ! GE              [ shift and go to state 81 ]


state 108

    (45) bin_op -> expression DOTDIV expression .
    (52) un_op -> expression . '
    (38) bin_op -> expression . + expression
    (39) bin_op -> expression . * expression
    (40) bin_op -> expression . - expression
    (41) bin_op -> expression . / expression
    (42) bin_op -> expression . DOTADD expression
    (43) bin_op -> expression . DOTSUB expression
    (44) bin_op -> expression . DOTMUL expression
    (45) bin_op -> expression . DOTDIV expression
    (46) logic_op -> expression . EQ expression
    (47) logic_op -> expression . NEQ expression
    (48) logic_op -> expression . > expression
    (49) logic_op -> expression . < expression
    (50) logic_op -> expression . LE expression
    (51) logic_op -> expression . GE expression

    ;               reduce using rule 45 (bin_op -> expression DOTDIV expression .)
    +               reduce using rule 45 (bin_op -> expression DOTDIV expression .)
    *               reduce using rule 45 (bin_op -> expression DOTDIV expression .)
    -               reduce using rule 45 (bin_op -> expression DOTDIV expression .)
    /               reduce using rule 45 (bin_op -> expression DOTDIV expression .)
    DOTADD          reduce using rule 45 (bin_op -> expression DOTDIV expression .)
    DOTSUB          reduce using rule 45 (bin_op -> expression DOTDIV expression .)
    DOTMUL          reduce using rule 45 (bin_op -> expression DOTDIV expression .)
    DOTDIV          reduce using rule 45 (bin_op -> expression DOTDIV expression .)
    EQ              reduce using rule 45 (bin_op -> expression DOTDIV expression .)
    NEQ             reduce using rule 45 (bin_op -> expression DOTDIV expression .)
    >               reduce using rule 45 (bin_op -> expression DOTDIV expression .)
    <               reduce using rule 45 (bin_op -> expression DOTDIV expression .)
    LE              reduce using rule 45 (bin_op -> expression DOTDIV expression .)
    GE              reduce using rule 45 (bin_op -> expression DOTDIV expression .)
    ,               reduce using rule 45 (bin_op -> expression DOTDIV expression .)
    )               reduce using rule 45 (bin_op -> expression DOTDIV expression .)
    :               reduce using rule 45 (bin_op -> expression DOTDIV expression .)
    {               reduce using rule 45 (bin_op -> expression DOTDIV expression .)
    ID              reduce using rule 45 (bin_op -> expression DOTDIV expression .)
    IF              reduce using rule 45 (bin_op -> expression DOTDIV expression .)
    WHILE           reduce using rule 45 (bin_op -> expression DOTDIV expression .)
    FOR             reduce using rule 45 (bin_op -> expression DOTDIV expression .)
    RETURN          reduce using rule 45 (bin_op -> expression DOTDIV expression .)
    BREAK           reduce using rule 45 (bin_op -> expression DOTDIV expression .)
    CONTINUE        reduce using rule 45 (bin_op -> expression DOTDIV expression .)
    PRINT           reduce using rule 45 (bin_op -> expression DOTDIV expression .)
    '               shift and go to state 67

  ! '               [ reduce using rule 45 (bin_op -> expression DOTDIV expression .) ]
  ! +               [ shift and go to state 68 ]
  ! *               [ shift and go to state 69 ]
  ! -               [ shift and go to state 70 ]
  ! /               [ shift and go to state 71 ]
  ! DOTADD          [ shift and go to state 72 ]
  ! DOTSUB          [ shift and go to state 73 ]
  ! DOTMUL          [ shift and go to state 74 ]
  ! DOTDIV          [ shift and go to state 75 ]
  ! EQ              [ shift and go to state 76 ]
  ! NEQ             [ shift and go to state 77 ]
  ! >               [ shift and go to state 78 ]
  ! <               [ shift and go to state 79 ]
  ! LE              [ shift and go to state 80 ]
  ! GE              [ shift and go to state 81 ]


state 109

    (46) logic_op -> expression EQ expression .
    (52) un_op -> expression . '
    (38) bin_op -> expression . + expression
    (39) bin_op -> expression . * expression
    (40) bin_op -> expression . - expression
    (41) bin_op -> expression . / expression
    (42) bin_op -> expression . DOTADD expression
    (43) bin_op -> expression . DOTSUB expression
    (44) bin_op -> expression . DOTMUL expression
    (45) bin_op -> expression . DOTDIV expression
    (46) logic_op -> expression . EQ expression
    (47) logic_op -> expression . NEQ expression
    (48) logic_op -> expression . > expression
    (49) logic_op -> expression . < expression
    (50) logic_op -> expression . LE expression
    (51) logic_op -> expression . GE expression

    ;               reduce using rule 46 (logic_op -> expression EQ expression .)
    EQ              reduce using rule 46 (logic_op -> expression EQ expression .)
    NEQ             reduce using rule 46 (logic_op -> expression EQ expression .)
    >               reduce using rule 46 (logic_op -> expression EQ expression .)
    <               reduce using rule 46 (logic_op -> expression EQ expression .)
    LE              reduce using rule 46 (logic_op -> expression EQ expression .)
    GE              reduce using rule 46 (logic_op -> expression EQ expression .)
    ,               reduce using rule 46 (logic_op -> expression EQ expression .)
    )               reduce using rule 46 (logic_op -> expression EQ expression .)
    :               reduce using rule 46 (logic_op -> expression EQ expression .)
    {               reduce using rule 46 (logic_op -> expression EQ expression .)
    ID              reduce using rule 46 (logic_op -> expression EQ expression .)
    IF              reduce using rule 46 (logic_op -> expression EQ expression .)
    WHILE           reduce using rule 46 (logic_op -> expression EQ expression .)
    FOR             reduce using rule 46 (logic_op -> expression EQ expression .)
    RETURN          reduce using rule 46 (logic_op -> expression EQ expression .)
    BREAK           reduce using rule 46 (logic_op -> expression EQ expression .)
    CONTINUE        reduce using rule 46 (logic_op -> expression EQ expression .)
    PRINT           reduce using rule 46 (logic_op -> expression EQ expression .)
    '               shift and go to state 67
    +               shift and go to state 68
    *               shift and go to state 69
    -               shift and go to state 70
    /               shift and go to state 71
    DOTADD          shift and go to state 72
    DOTSUB          shift and go to state 73
    DOTMUL          shift and go to state 74
    DOTDIV          shift and go to state 75

  ! '               [ reduce using rule 46 (logic_op -> expression EQ expression .) ]
  ! +               [ reduce using rule 46 (logic_op -> expression EQ expression .) ]
  ! *               [ reduce using rule 46 (logic_op -> expression EQ expression .) ]
  ! -               [ reduce using rule 46 (logic_op -> expression EQ expression .) ]
  ! /               [ reduce using rule 46 (logic_op -> expression EQ expression .) ]
  ! DOTADD          [ reduce using rule 46 (logic_op -> expression EQ expression .) ]
  ! DOTSUB          [ reduce using rule 46 (logic_op -> expression EQ expression .) ]
  ! DOTMUL          [ reduce using rule 46 (logic_op -> expression EQ expression .) ]
  ! DOTDIV          [ reduce using rule 46 (logic_op -> expression EQ expression .) ]
  ! EQ              [ shift and go to state 76 ]
  ! NEQ             [ shift and go to state 77 ]
  ! >               [ shift and go to state 78 ]
  ! <               [ shift and go to state 79 ]
  ! LE              [ shift and go to state 80 ]
  ! GE              [ shift and go to state 81 ]


state 110

    (47) logic_op -> expression NEQ expression .
    (52) un_op -> expression . '
    (38) bin_op -> expression . + expression
    (39) bin_op -> expression . * expression
    (40) bin_op -> expression . - expression
    (41) bin_op -> expression . / expression
    (42) bin_op -> expression . DOTADD expression
    (43) bin_op -> expression . DOTSUB expression
    (44) bin_op -> expression . DOTMUL expression
    (45) bin_op -> expression . DOTDIV expression
    (46) logic_op -> expression . EQ expression
    (47) logic_op -> expression . NEQ expression
    (48) logic_op -> expression . > expression
    (49) logic_op -> expression . < expression
    (50) logic_op -> expression . LE expression
    (51) logic_op -> expression . GE expression

    ;               reduce using rule 47 (logic_op -> expression NEQ expression .)
    EQ              reduce using rule 47 (logic_op -> expression NEQ expression .)
    NEQ             reduce using rule 47 (logic_op -> expression NEQ expression .)
    >               reduce using rule 47 (logic_op -> expression NEQ expression .)
    <               reduce using rule 47 (logic_op -> expression NEQ expression .)
    LE              reduce using rule 47 (logic_op -> expression NEQ expression .)
    GE              reduce using rule 47 (logic_op -> expression NEQ expression .)
    ,               reduce using rule 47 (logic_op -> expression NEQ expression .)
    )               reduce using rule 47 (logic_op -> expression NEQ expression .)
    :               reduce using rule 47 (logic_op -> expression NEQ expression .)
    {               reduce using rule 47 (logic_op -> expression NEQ expression .)
    ID              reduce using rule 47 (logic_op -> expression NEQ expression .)
    IF              reduce using rule 47 (logic_op -> expression NEQ expression .)
    WHILE           reduce using rule 47 (logic_op -> expression NEQ expression .)
    FOR             reduce using rule 47 (logic_op -> expression NEQ expression .)
    RETURN          reduce using rule 47 (logic_op -> expression NEQ expression .)
    BREAK           reduce using rule 47 (logic_op -> expression NEQ expression .)
    CONTINUE        reduce using rule 47 (logic_op -> expression NEQ expression .)
    PRINT           reduce using rule 47 (logic_op -> expression NEQ expression .)
    '               shift and go to state 67
    +               shift and go to state 68
    *               shift and go to state 69
    -               shift and go to state 70
    /               shift and go to state 71
    DOTADD          shift and go to state 72
    DOTSUB          shift and go to state 73
    DOTMUL          shift and go to state 74
    DOTDIV          shift and go to state 75

  ! '               [ reduce using rule 47 (logic_op -> expression NEQ expression .) ]
  ! +               [ reduce using rule 47 (logic_op -> expression NEQ expression .) ]
  ! *               [ reduce using rule 47 (logic_op -> expression NEQ expression .) ]
  ! -               [ reduce using rule 47 (logic_op -> expression NEQ expression .) ]
  ! /               [ reduce using rule 47 (logic_op -> expression NEQ expression .) ]
  ! DOTADD          [ reduce using rule 47 (logic_op -> expression NEQ expression .) ]
  ! DOTSUB          [ reduce using rule 47 (logic_op -> expression NEQ expression .) ]
  ! DOTMUL          [ reduce using rule 47 (logic_op -> expression NEQ expression .) ]
  ! DOTDIV          [ reduce using rule 47 (logic_op -> expression NEQ expression .) ]
  ! EQ              [ shift and go to state 76 ]
  ! NEQ             [ shift and go to state 77 ]
  ! >               [ shift and go to state 78 ]
  ! <               [ shift and go to state 79 ]
  ! LE              [ shift and go to state 80 ]
  ! GE              [ shift and go to state 81 ]


state 111

    (48) logic_op -> expression > expression .
    (52) un_op -> expression . '
    (38) bin_op -> expression . + expression
    (39) bin_op -> expression . * expression
    (40) bin_op -> expression . - expression
    (41) bin_op -> expression . / expression
    (42) bin_op -> expression . DOTADD expression
    (43) bin_op -> expression . DOTSUB expression
    (44) bin_op -> expression . DOTMUL expression
    (45) bin_op -> expression . DOTDIV expression
    (46) logic_op -> expression . EQ expression
    (47) logic_op -> expression . NEQ expression
    (48) logic_op -> expression . > expression
    (49) logic_op -> expression . < expression
    (50) logic_op -> expression . LE expression
    (51) logic_op -> expression . GE expression

    ;               reduce using rule 48 (logic_op -> expression > expression .)
    EQ              reduce using rule 48 (logic_op -> expression > expression .)
    NEQ             reduce using rule 48 (logic_op -> expression > expression .)
    >               reduce using rule 48 (logic_op -> expression > expression .)
    <               reduce using rule 48 (logic_op -> expression > expression .)
    LE              reduce using rule 48 (logic_op -> expression > expression .)
    GE              reduce using rule 48 (logic_op -> expression > expression .)
    ,               reduce using rule 48 (logic_op -> expression > expression .)
    )               reduce using rule 48 (logic_op -> expression > expression .)
    :               reduce using rule 48 (logic_op -> expression > expression .)
    {               reduce using rule 48 (logic_op -> expression > expression .)
    ID              reduce using rule 48 (logic_op -> expression > expression .)
    IF              reduce using rule 48 (logic_op -> expression > expression .)
    WHILE           reduce using rule 48 (logic_op -> expression > expression .)
    FOR             reduce using rule 48 (logic_op -> expression > expression .)
    RETURN          reduce using rule 48 (logic_op -> expression > expression .)
    BREAK           reduce using rule 48 (logic_op -> expression > expression .)
    CONTINUE        reduce using rule 48 (logic_op -> expression > expression .)
    PRINT           reduce using rule 48 (logic_op -> expression > expression .)
    '               shift and go to state 67
    +               shift and go to state 68
    *               shift and go to state 69
    -               shift and go to state 70
    /               shift and go to state 71
    DOTADD          shift and go to state 72
    DOTSUB          shift and go to state 73
    DOTMUL          shift and go to state 74
    DOTDIV          shift and go to state 75

  ! '               [ reduce using rule 48 (logic_op -> expression > expression .) ]
  ! +               [ reduce using rule 48 (logic_op -> expression > expression .) ]
  ! *               [ reduce using rule 48 (logic_op -> expression > expression .) ]
  ! -               [ reduce using rule 48 (logic_op -> expression > expression .) ]
  ! /               [ reduce using rule 48 (logic_op -> expression > expression .) ]
  ! DOTADD          [ reduce using rule 48 (logic_op -> expression > expression .) ]
  ! DOTSUB          [ reduce using rule 48 (logic_op -> expression > expression .) ]
  ! DOTMUL          [ reduce using rule 48 (logic_op -> expression > expression .) ]
  ! DOTDIV          [ reduce using rule 48 (logic_op -> expression > expression .) ]
  ! EQ              [ shift and go to state 76 ]
  ! NEQ             [ shift and go to state 77 ]
  ! >               [ shift and go to state 78 ]
  ! <               [ shift and go to state 79 ]
  ! LE              [ shift and go to state 80 ]
  ! GE              [ shift and go to state 81 ]


state 112

    (49) logic_op -> expression < expression .
    (52) un_op -> expression . '
    (38) bin_op -> expression . + expression
    (39) bin_op -> expression . * expression
    (40) bin_op -> expression . - expression
    (41) bin_op -> expression . / expression
    (42) bin_op -> expression . DOTADD expression
    (43) bin_op -> expression . DOTSUB expression
    (44) bin_op -> expression . DOTMUL expression
    (45) bin_op -> expression . DOTDIV expression
    (46) logic_op -> expression . EQ expression
    (47) logic_op -> expression . NEQ expression
    (48) logic_op -> expression . > expression
    (49) logic_op -> expression . < expression
    (50) logic_op -> expression . LE expression
    (51) logic_op -> expression . GE expression

    ;               reduce using rule 49 (logic_op -> expression < expression .)
    EQ              reduce using rule 49 (logic_op -> expression < expression .)
    NEQ             reduce using rule 49 (logic_op -> expression < expression .)
    >               reduce using rule 49 (logic_op -> expression < expression .)
    <               reduce using rule 49 (logic_op -> expression < expression .)
    LE              reduce using rule 49 (logic_op -> expression < expression .)
    GE              reduce using rule 49 (logic_op -> expression < expression .)
    ,               reduce using rule 49 (logic_op -> expression < expression .)
    )               reduce using rule 49 (logic_op -> expression < expression .)
    :               reduce using rule 49 (logic_op -> expression < expression .)
    {               reduce using rule 49 (logic_op -> expression < expression .)
    ID              reduce using rule 49 (logic_op -> expression < expression .)
    IF              reduce using rule 49 (logic_op -> expression < expression .)
    WHILE           reduce using rule 49 (logic_op -> expression < expression .)
    FOR             reduce using rule 49 (logic_op -> expression < expression .)
    RETURN          reduce using rule 49 (logic_op -> expression < expression .)
    BREAK           reduce using rule 49 (logic_op -> expression < expression .)
    CONTINUE        reduce using rule 49 (logic_op -> expression < expression .)
    PRINT           reduce using rule 49 (logic_op -> expression < expression .)
    '               shift and go to state 67
    +               shift and go to state 68
    *               shift and go to state 69
    -               shift and go to state 70
    /               shift and go to state 71
    DOTADD          shift and go to state 72
    DOTSUB          shift and go to state 73
    DOTMUL          shift and go to state 74
    DOTDIV          shift and go to state 75

  ! '               [ reduce using rule 49 (logic_op -> expression < expression .) ]
  ! +               [ reduce using rule 49 (logic_op -> expression < expression .) ]
  ! *               [ reduce using rule 49 (logic_op -> expression < expression .) ]
  ! -               [ reduce using rule 49 (logic_op -> expression < expression .) ]
  ! /               [ reduce using rule 49 (logic_op -> expression < expression .) ]
  ! DOTADD          [ reduce using rule 49 (logic_op -> expression < expression .) ]
  ! DOTSUB          [ reduce using rule 49 (logic_op -> expression < expression .) ]
  ! DOTMUL          [ reduce using rule 49 (logic_op -> expression < expression .) ]
  ! DOTDIV          [ reduce using rule 49 (logic_op -> expression < expression .) ]
  ! EQ              [ shift and go to state 76 ]
  ! NEQ             [ shift and go to state 77 ]
  ! >               [ shift and go to state 78 ]
  ! <               [ shift and go to state 79 ]
  ! LE              [ shift and go to state 80 ]
  ! GE              [ shift and go to state 81 ]


state 113

    (50) logic_op -> expression LE expression .
    (52) un_op -> expression . '
    (38) bin_op -> expression . + expression
    (39) bin_op -> expression . * expression
    (40) bin_op -> expression . - expression
    (41) bin_op -> expression . / expression
    (42) bin_op -> expression . DOTADD expression
    (43) bin_op -> expression . DOTSUB expression
    (44) bin_op -> expression . DOTMUL expression
    (45) bin_op -> expression . DOTDIV expression
    (46) logic_op -> expression . EQ expression
    (47) logic_op -> expression . NEQ expression
    (48) logic_op -> expression . > expression
    (49) logic_op -> expression . < expression
    (50) logic_op -> expression . LE expression
    (51) logic_op -> expression . GE expression

    ;               reduce using rule 50 (logic_op -> expression LE expression .)
    EQ              reduce using rule 50 (logic_op -> expression LE expression .)
    NEQ             reduce using rule 50 (logic_op -> expression LE expression .)
    >               reduce using rule 50 (logic_op -> expression LE expression .)
    <               reduce using rule 50 (logic_op -> expression LE expression .)
    LE              reduce using rule 50 (logic_op -> expression LE expression .)
    GE              reduce using rule 50 (logic_op -> expression LE expression .)
    ,               reduce using rule 50 (logic_op -> expression LE expression .)
    )               reduce using rule 50 (logic_op -> expression LE expression .)
    :               reduce using rule 50 (logic_op -> expression LE expression .)
    {               reduce using rule 50 (logic_op -> expression LE expression .)
    ID              reduce using rule 50 (logic_op -> expression LE expression .)
    IF              reduce using rule 50 (logic_op -> expression LE expression .)
    WHILE           reduce using rule 50 (logic_op -> expression LE expression .)
    FOR             reduce using rule 50 (logic_op -> expression LE expression .)
    RETURN          reduce using rule 50 (logic_op -> expression LE expression .)
    BREAK           reduce using rule 50 (logic_op -> expression LE expression .)
    CONTINUE        reduce using rule 50 (logic_op -> expression LE expression .)
    PRINT           reduce using rule 50 (logic_op -> expression LE expression .)
    '               shift and go to state 67
    +               shift and go to state 68
    *               shift and go to state 69
    -               shift and go to state 70
    /               shift and go to state 71
    DOTADD          shift and go to state 72
    DOTSUB          shift and go to state 73
    DOTMUL          shift and go to state 74
    DOTDIV          shift and go to state 75

  ! '               [ reduce using rule 50 (logic_op -> expression LE expression .) ]
  ! +               [ reduce using rule 50 (logic_op -> expression LE expression .) ]
  ! *               [ reduce using rule 50 (logic_op -> expression LE expression .) ]
  ! -               [ reduce using rule 50 (logic_op -> expression LE expression .) ]
  ! /               [ reduce using rule 50 (logic_op -> expression LE expression .) ]
  ! DOTADD          [ reduce using rule 50 (logic_op -> expression LE expression .) ]
  ! DOTSUB          [ reduce using rule 50 (logic_op -> expression LE expression .) ]
  ! DOTMUL          [ reduce using rule 50 (logic_op -> expression LE expression .) ]
  ! DOTDIV          [ reduce using rule 50 (logic_op -> expression LE expression .) ]
  ! EQ              [ shift and go to state 76 ]
  ! NEQ             [ shift and go to state 77 ]
  ! >               [ shift and go to state 78 ]
  ! <               [ shift and go to state 79 ]
  ! LE              [ shift and go to state 80 ]
  ! GE              [ shift and go to state 81 ]


state 114

    (51) logic_op -> expression GE expression .
    (52) un_op -> expression . '
    (38) bin_op -> expression . + expression
    (39) bin_op -> expression . * expression
    (40) bin_op -> expression . - expression
    (41) bin_op -> expression . / expression
    (42) bin_op -> expression . DOTADD expression
    (43) bin_op -> expression . DOTSUB expression
    (44) bin_op -> expression . DOTMUL expression
    (45) bin_op -> expression . DOTDIV expression
    (46) logic_op -> expression . EQ expression
    (47) logic_op -> expression . NEQ expression
    (48) logic_op -> expression . > expression
    (49) logic_op -> expression . < expression
    (50) logic_op -> expression . LE expression
    (51) logic_op -> expression . GE expression

    ;               reduce using rule 51 (logic_op -> expression GE expression .)
    EQ              reduce using rule 51 (logic_op -> expression GE expression .)
    NEQ             reduce using rule 51 (logic_op -> expression GE expression .)
    >               reduce using rule 51 (logic_op -> expression GE expression .)
    <               reduce using rule 51 (logic_op -> expression GE expression .)
    LE              reduce using rule 51 (logic_op -> expression GE expression .)
    GE              reduce using rule 51 (logic_op -> expression GE expression .)
    ,               reduce using rule 51 (logic_op -> expression GE expression .)
    )               reduce using rule 51 (logic_op -> expression GE expression .)
    :               reduce using rule 51 (logic_op -> expression GE expression .)
    {               reduce using rule 51 (logic_op -> expression GE expression .)
    ID              reduce using rule 51 (logic_op -> expression GE expression .)
    IF              reduce using rule 51 (logic_op -> expression GE expression .)
    WHILE           reduce using rule 51 (logic_op -> expression GE expression .)
    FOR             reduce using rule 51 (logic_op -> expression GE expression .)
    RETURN          reduce using rule 51 (logic_op -> expression GE expression .)
    BREAK           reduce using rule 51 (logic_op -> expression GE expression .)
    CONTINUE        reduce using rule 51 (logic_op -> expression GE expression .)
    PRINT           reduce using rule 51 (logic_op -> expression GE expression .)
    '               shift and go to state 67
    +               shift and go to state 68
    *               shift and go to state 69
    -               shift and go to state 70
    /               shift and go to state 71
    DOTADD          shift and go to state 72
    DOTSUB          shift and go to state 73
    DOTMUL          shift and go to state 74
    DOTDIV          shift and go to state 75

  ! '               [ reduce using rule 51 (logic_op -> expression GE expression .) ]
  ! +               [ reduce using rule 51 (logic_op -> expression GE expression .) ]
  ! *               [ reduce using rule 51 (logic_op -> expression GE expression .) ]
  ! -               [ reduce using rule 51 (logic_op -> expression GE expression .) ]
  ! /               [ reduce using rule 51 (logic_op -> expression GE expression .) ]
  ! DOTADD          [ reduce using rule 51 (logic_op -> expression GE expression .) ]
  ! DOTSUB          [ reduce using rule 51 (logic_op -> expression GE expression .) ]
  ! DOTMUL          [ reduce using rule 51 (logic_op -> expression GE expression .) ]
  ! DOTDIV          [ reduce using rule 51 (logic_op -> expression GE expression .) ]
  ! EQ              [ shift and go to state 76 ]
  ! NEQ             [ shift and go to state 77 ]
  ! >               [ shift and go to state 78 ]
  ! <               [ shift and go to state 79 ]
  ! LE              [ shift and go to state 80 ]
  ! GE              [ shift and go to state 81 ]


state 115

    (20) expression -> ( expression ) .

    ;               reduce using rule 20 (expression -> ( expression ) .)
    '               reduce using rule 20 (expression -> ( expression ) .)
    +               reduce using rule 20 (expression -> ( expression ) .)
    *               reduce using rule 20 (expression -> ( expression ) .)
    -               reduce using rule 20 (expression -> ( expression ) .)
    /               reduce using rule 20 (expression -> ( expression ) .)
    DOTADD          reduce using rule 20 (expression -> ( expression ) .)
    DOTSUB          reduce using rule 20 (expression -> ( expression ) .)
    DOTMUL          reduce using rule 20 (expression -> ( expression ) .)
    DOTDIV          reduce using rule 20 (expression -> ( expression ) .)
    EQ              reduce using rule 20 (expression -> ( expression ) .)
    NEQ             reduce using rule 20 (expression -> ( expression ) .)
    >               reduce using rule 20 (expression -> ( expression ) .)
    <               reduce using rule 20 (expression -> ( expression ) .)
    LE              reduce using rule 20 (expression -> ( expression ) .)
    GE              reduce using rule 20 (expression -> ( expression ) .)
    ,               reduce using rule 20 (expression -> ( expression ) .)
    )               reduce using rule 20 (expression -> ( expression ) .)
    :               reduce using rule 20 (expression -> ( expression ) .)
    {               reduce using rule 20 (expression -> ( expression ) .)
    ID              reduce using rule 20 (expression -> ( expression ) .)
    IF              reduce using rule 20 (expression -> ( expression ) .)
    WHILE           reduce using rule 20 (expression -> ( expression ) .)
    FOR             reduce using rule 20 (expression -> ( expression ) .)
    RETURN          reduce using rule 20 (expression -> ( expression ) .)
    BREAK           reduce using rule 20 (expression -> ( expression ) .)
    CONTINUE        reduce using rule 20 (expression -> ( expression ) .)
    PRINT           reduce using rule 20 (expression -> ( expression ) .)


state 116

    (30) matrix -> EYE ( int_sequence . )
    (34) int_sequence -> int_sequence . , INTNUM

    )               shift and go to state 128
    ,               shift and go to state 97


state 117

    (31) matrix -> ZEROS ( int_sequence . )
    (34) int_sequence -> int_sequence . , INTNUM

    )               shift and go to state 129
    ,               shift and go to state 97


state 118

    (32) matrix -> ONES ( int_sequence . )
    (34) int_sequence -> int_sequence . , INTNUM

    )               shift and go to state 130
    ,               shift and go to state 97


state 119

    (33) matrix -> [ matrix_row ] .

    ;               reduce using rule 33 (matrix -> [ matrix_row ] .)
    '               reduce using rule 33 (matrix -> [ matrix_row ] .)
    +               reduce using rule 33 (matrix -> [ matrix_row ] .)
    *               reduce using rule 33 (matrix -> [ matrix_row ] .)
    -               reduce using rule 33 (matrix -> [ matrix_row ] .)
    /               reduce using rule 33 (matrix -> [ matrix_row ] .)
    DOTADD          reduce using rule 33 (matrix -> [ matrix_row ] .)
    DOTSUB          reduce using rule 33 (matrix -> [ matrix_row ] .)
    DOTMUL          reduce using rule 33 (matrix -> [ matrix_row ] .)
    DOTDIV          reduce using rule 33 (matrix -> [ matrix_row ] .)
    EQ              reduce using rule 33 (matrix -> [ matrix_row ] .)
    NEQ             reduce using rule 33 (matrix -> [ matrix_row ] .)
    >               reduce using rule 33 (matrix -> [ matrix_row ] .)
    <               reduce using rule 33 (matrix -> [ matrix_row ] .)
    LE              reduce using rule 33 (matrix -> [ matrix_row ] .)
    GE              reduce using rule 33 (matrix -> [ matrix_row ] .)
    ,               reduce using rule 33 (matrix -> [ matrix_row ] .)
    )               reduce using rule 33 (matrix -> [ matrix_row ] .)
    ]               reduce using rule 33 (matrix -> [ matrix_row ] .)
    :               reduce using rule 33 (matrix -> [ matrix_row ] .)
    {               reduce using rule 33 (matrix -> [ matrix_row ] .)
    ID              reduce using rule 33 (matrix -> [ matrix_row ] .)
    IF              reduce using rule 33 (matrix -> [ matrix_row ] .)
    WHILE           reduce using rule 33 (matrix -> [ matrix_row ] .)
    FOR             reduce using rule 33 (matrix -> [ matrix_row ] .)
    RETURN          reduce using rule 33 (matrix -> [ matrix_row ] .)
    BREAK           reduce using rule 33 (matrix -> [ matrix_row ] .)
    CONTINUE        reduce using rule 33 (matrix -> [ matrix_row ] .)
    PRINT           reduce using rule 33 (matrix -> [ matrix_row ] .)


state 120

    (36) matrix_row -> matrix_row , . value
    (26) value -> . variable
    (27) value -> . matrix
    (28) value -> . constant
    (24) variable -> . ID
    (25) variable -> . matrix_access
    (30) matrix -> . EYE ( int_sequence )
    (31) matrix -> . ZEROS ( int_sequence )
    (32) matrix -> . ONES ( int_sequence )
    (33) matrix -> . [ matrix_row ]
    (21) constant -> . INTNUM
    (22) constant -> . FLOATNUM
    (23) constant -> . STRING
    (29) matrix_access -> . ID [ int_sequence ]

    ID              shift and go to state 15
    EYE             shift and go to state 48
    ZEROS           shift and go to state 49
    ONES            shift and go to state 50
    [               shift and go to state 51
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STRING          shift and go to state 47

    value                          shift and go to state 131
    variable                       shift and go to state 88
    matrix                         shift and go to state 89
    constant                       shift and go to state 90
    matrix_access                  shift and go to state 16

state 121

    (71) instructions_to_print -> instructions_to_print , expression .
    (52) un_op -> expression . '
    (38) bin_op -> expression . + expression
    (39) bin_op -> expression . * expression
    (40) bin_op -> expression . - expression
    (41) bin_op -> expression . / expression
    (42) bin_op -> expression . DOTADD expression
    (43) bin_op -> expression . DOTSUB expression
    (44) bin_op -> expression . DOTMUL expression
    (45) bin_op -> expression . DOTDIV expression
    (46) logic_op -> expression . EQ expression
    (47) logic_op -> expression . NEQ expression
    (48) logic_op -> expression . > expression
    (49) logic_op -> expression . < expression
    (50) logic_op -> expression . LE expression
    (51) logic_op -> expression . GE expression

    ;               reduce using rule 71 (instructions_to_print -> instructions_to_print , expression .)
    ,               reduce using rule 71 (instructions_to_print -> instructions_to_print , expression .)
    '               shift and go to state 67
    +               shift and go to state 68
    *               shift and go to state 69
    -               shift and go to state 70
    /               shift and go to state 71
    DOTADD          shift and go to state 72
    DOTSUB          shift and go to state 73
    DOTMUL          shift and go to state 74
    DOTDIV          shift and go to state 75
    EQ              shift and go to state 76
    NEQ             shift and go to state 77
    >               shift and go to state 78
    <               shift and go to state 79
    LE              shift and go to state 80
    GE              shift and go to state 81


state 122

    (34) int_sequence -> int_sequence , INTNUM .

    ]               reduce using rule 34 (int_sequence -> int_sequence , INTNUM .)
    ,               reduce using rule 34 (int_sequence -> int_sequence , INTNUM .)
    )               reduce using rule 34 (int_sequence -> int_sequence , INTNUM .)


state 123

    (61) conditional_statement -> IF ( logic_op ) conditional_instructions .
    (62) conditional_statement -> IF ( logic_op ) conditional_instructions . ELSE conditional_instructions

    {               reduce using rule 61 (conditional_statement -> IF ( logic_op ) conditional_instructions .)
    ID              reduce using rule 61 (conditional_statement -> IF ( logic_op ) conditional_instructions .)
    IF              reduce using rule 61 (conditional_statement -> IF ( logic_op ) conditional_instructions .)
    WHILE           reduce using rule 61 (conditional_statement -> IF ( logic_op ) conditional_instructions .)
    FOR             reduce using rule 61 (conditional_statement -> IF ( logic_op ) conditional_instructions .)
    RETURN          reduce using rule 61 (conditional_statement -> IF ( logic_op ) conditional_instructions .)
    BREAK           reduce using rule 61 (conditional_statement -> IF ( logic_op ) conditional_instructions .)
    CONTINUE        reduce using rule 61 (conditional_statement -> IF ( logic_op ) conditional_instructions .)
    PRINT           reduce using rule 61 (conditional_statement -> IF ( logic_op ) conditional_instructions .)
    $end            reduce using rule 61 (conditional_statement -> IF ( logic_op ) conditional_instructions .)
    }               reduce using rule 61 (conditional_statement -> IF ( logic_op ) conditional_instructions .)
    ELSE            shift and go to state 132

  ! ELSE            [ reduce using rule 61 (conditional_statement -> IF ( logic_op ) conditional_instructions .) ]


state 124

    (63) conditional_instructions -> statement .

    ELSE            reduce using rule 63 (conditional_instructions -> statement .)
    {               reduce using rule 63 (conditional_instructions -> statement .)
    ID              reduce using rule 63 (conditional_instructions -> statement .)
    IF              reduce using rule 63 (conditional_instructions -> statement .)
    WHILE           reduce using rule 63 (conditional_instructions -> statement .)
    FOR             reduce using rule 63 (conditional_instructions -> statement .)
    RETURN          reduce using rule 63 (conditional_instructions -> statement .)
    BREAK           reduce using rule 63 (conditional_instructions -> statement .)
    CONTINUE        reduce using rule 63 (conditional_instructions -> statement .)
    PRINT           reduce using rule 63 (conditional_instructions -> statement .)
    $end            reduce using rule 63 (conditional_instructions -> statement .)
    }               reduce using rule 63 (conditional_instructions -> statement .)


state 125

    (64) conditional_instructions -> { . statements }
    (2) statements -> . { statements }
    (3) statements -> . statements statement
    (4) statements -> . statement
    (5) statements -> . statements { statements }
    (6) statement -> . assignment
    (7) statement -> . flow_control
    (8) assignment -> . variable assignment_op expression ;
    (54) flow_control -> . conditional_statement
    (55) flow_control -> . while_loop
    (56) flow_control -> . for_loop
    (57) flow_control -> . return_instr
    (58) flow_control -> . break_instr
    (59) flow_control -> . continue_instr
    (60) flow_control -> . print_instr
    (24) variable -> . ID
    (25) variable -> . matrix_access
    (61) conditional_statement -> . IF ( logic_op ) conditional_instructions
    (62) conditional_statement -> . IF ( logic_op ) conditional_instructions ELSE conditional_instructions
    (65) while_loop -> . WHILE ( logic_op ) conditional_instructions
    (66) for_loop -> . FOR ID = expression : expression conditional_instructions
    (67) return_instr -> . RETURN expression ;
    (69) break_instr -> . BREAK ;
    (68) continue_instr -> . CONTINUE ;
    (70) print_instr -> . PRINT instructions_to_print ;
    (29) matrix_access -> . ID [ int_sequence ]

    {               shift and go to state 3
    ID              shift and go to state 15
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    RETURN          shift and go to state 20
    BREAK           shift and go to state 21
    CONTINUE        shift and go to state 22
    PRINT           shift and go to state 23

    statements                     shift and go to state 133
    statement                      shift and go to state 4
    assignment                     shift and go to state 5
    flow_control                   shift and go to state 6
    variable                       shift and go to state 7
    conditional_statement          shift and go to state 8
    while_loop                     shift and go to state 9
    for_loop                       shift and go to state 10
    return_instr                   shift and go to state 11
    break_instr                    shift and go to state 12
    continue_instr                 shift and go to state 13
    print_instr                    shift and go to state 14
    matrix_access                  shift and go to state 16

state 126

    (65) while_loop -> WHILE ( logic_op ) conditional_instructions .

    {               reduce using rule 65 (while_loop -> WHILE ( logic_op ) conditional_instructions .)
    ID              reduce using rule 65 (while_loop -> WHILE ( logic_op ) conditional_instructions .)
    IF              reduce using rule 65 (while_loop -> WHILE ( logic_op ) conditional_instructions .)
    WHILE           reduce using rule 65 (while_loop -> WHILE ( logic_op ) conditional_instructions .)
    FOR             reduce using rule 65 (while_loop -> WHILE ( logic_op ) conditional_instructions .)
    RETURN          reduce using rule 65 (while_loop -> WHILE ( logic_op ) conditional_instructions .)
    BREAK           reduce using rule 65 (while_loop -> WHILE ( logic_op ) conditional_instructions .)
    CONTINUE        reduce using rule 65 (while_loop -> WHILE ( logic_op ) conditional_instructions .)
    PRINT           reduce using rule 65 (while_loop -> WHILE ( logic_op ) conditional_instructions .)
    $end            reduce using rule 65 (while_loop -> WHILE ( logic_op ) conditional_instructions .)
    }               reduce using rule 65 (while_loop -> WHILE ( logic_op ) conditional_instructions .)
    ELSE            reduce using rule 65 (while_loop -> WHILE ( logic_op ) conditional_instructions .)


state 127

    (66) for_loop -> FOR ID = expression : . expression conditional_instructions
    (14) expression -> . variable
    (15) expression -> . constant
    (16) expression -> . matrix
    (17) expression -> . un_op
    (18) expression -> . bin_op
    (19) expression -> . logic_op
    (20) expression -> . ( expression )
    (24) variable -> . ID
    (25) variable -> . matrix_access
    (21) constant -> . INTNUM
    (22) constant -> . FLOATNUM
    (23) constant -> . STRING
    (30) matrix -> . EYE ( int_sequence )
    (31) matrix -> . ZEROS ( int_sequence )
    (32) matrix -> . ONES ( int_sequence )
    (33) matrix -> . [ matrix_row ]
    (52) un_op -> . expression '
    (53) un_op -> . - expression
    (38) bin_op -> . expression + expression
    (39) bin_op -> . expression * expression
    (40) bin_op -> . expression - expression
    (41) bin_op -> . expression / expression
    (42) bin_op -> . expression DOTADD expression
    (43) bin_op -> . expression DOTSUB expression
    (44) bin_op -> . expression DOTMUL expression
    (45) bin_op -> . expression DOTDIV expression
    (46) logic_op -> . expression EQ expression
    (47) logic_op -> . expression NEQ expression
    (48) logic_op -> . expression > expression
    (49) logic_op -> . expression < expression
    (50) logic_op -> . expression LE expression
    (51) logic_op -> . expression GE expression
    (29) matrix_access -> . ID [ int_sequence ]

    (               shift and go to state 44
    ID              shift and go to state 15
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STRING          shift and go to state 47
    EYE             shift and go to state 48
    ZEROS           shift and go to state 49
    ONES            shift and go to state 50
    [               shift and go to state 51
    -               shift and go to state 52

    expression                     shift and go to state 134
    variable                       shift and go to state 38
    constant                       shift and go to state 39
    matrix                         shift and go to state 40
    un_op                          shift and go to state 41
    bin_op                         shift and go to state 42
    logic_op                       shift and go to state 43
    matrix_access                  shift and go to state 16

state 128

    (30) matrix -> EYE ( int_sequence ) .

    ;               reduce using rule 30 (matrix -> EYE ( int_sequence ) .)
    '               reduce using rule 30 (matrix -> EYE ( int_sequence ) .)
    +               reduce using rule 30 (matrix -> EYE ( int_sequence ) .)
    *               reduce using rule 30 (matrix -> EYE ( int_sequence ) .)
    -               reduce using rule 30 (matrix -> EYE ( int_sequence ) .)
    /               reduce using rule 30 (matrix -> EYE ( int_sequence ) .)
    DOTADD          reduce using rule 30 (matrix -> EYE ( int_sequence ) .)
    DOTSUB          reduce using rule 30 (matrix -> EYE ( int_sequence ) .)
    DOTMUL          reduce using rule 30 (matrix -> EYE ( int_sequence ) .)
    DOTDIV          reduce using rule 30 (matrix -> EYE ( int_sequence ) .)
    EQ              reduce using rule 30 (matrix -> EYE ( int_sequence ) .)
    NEQ             reduce using rule 30 (matrix -> EYE ( int_sequence ) .)
    >               reduce using rule 30 (matrix -> EYE ( int_sequence ) .)
    <               reduce using rule 30 (matrix -> EYE ( int_sequence ) .)
    LE              reduce using rule 30 (matrix -> EYE ( int_sequence ) .)
    GE              reduce using rule 30 (matrix -> EYE ( int_sequence ) .)
    ,               reduce using rule 30 (matrix -> EYE ( int_sequence ) .)
    )               reduce using rule 30 (matrix -> EYE ( int_sequence ) .)
    ]               reduce using rule 30 (matrix -> EYE ( int_sequence ) .)
    :               reduce using rule 30 (matrix -> EYE ( int_sequence ) .)
    {               reduce using rule 30 (matrix -> EYE ( int_sequence ) .)
    ID              reduce using rule 30 (matrix -> EYE ( int_sequence ) .)
    IF              reduce using rule 30 (matrix -> EYE ( int_sequence ) .)
    WHILE           reduce using rule 30 (matrix -> EYE ( int_sequence ) .)
    FOR             reduce using rule 30 (matrix -> EYE ( int_sequence ) .)
    RETURN          reduce using rule 30 (matrix -> EYE ( int_sequence ) .)
    BREAK           reduce using rule 30 (matrix -> EYE ( int_sequence ) .)
    CONTINUE        reduce using rule 30 (matrix -> EYE ( int_sequence ) .)
    PRINT           reduce using rule 30 (matrix -> EYE ( int_sequence ) .)


state 129

    (31) matrix -> ZEROS ( int_sequence ) .

    ;               reduce using rule 31 (matrix -> ZEROS ( int_sequence ) .)
    '               reduce using rule 31 (matrix -> ZEROS ( int_sequence ) .)
    +               reduce using rule 31 (matrix -> ZEROS ( int_sequence ) .)
    *               reduce using rule 31 (matrix -> ZEROS ( int_sequence ) .)
    -               reduce using rule 31 (matrix -> ZEROS ( int_sequence ) .)
    /               reduce using rule 31 (matrix -> ZEROS ( int_sequence ) .)
    DOTADD          reduce using rule 31 (matrix -> ZEROS ( int_sequence ) .)
    DOTSUB          reduce using rule 31 (matrix -> ZEROS ( int_sequence ) .)
    DOTMUL          reduce using rule 31 (matrix -> ZEROS ( int_sequence ) .)
    DOTDIV          reduce using rule 31 (matrix -> ZEROS ( int_sequence ) .)
    EQ              reduce using rule 31 (matrix -> ZEROS ( int_sequence ) .)
    NEQ             reduce using rule 31 (matrix -> ZEROS ( int_sequence ) .)
    >               reduce using rule 31 (matrix -> ZEROS ( int_sequence ) .)
    <               reduce using rule 31 (matrix -> ZEROS ( int_sequence ) .)
    LE              reduce using rule 31 (matrix -> ZEROS ( int_sequence ) .)
    GE              reduce using rule 31 (matrix -> ZEROS ( int_sequence ) .)
    ,               reduce using rule 31 (matrix -> ZEROS ( int_sequence ) .)
    )               reduce using rule 31 (matrix -> ZEROS ( int_sequence ) .)
    ]               reduce using rule 31 (matrix -> ZEROS ( int_sequence ) .)
    :               reduce using rule 31 (matrix -> ZEROS ( int_sequence ) .)
    {               reduce using rule 31 (matrix -> ZEROS ( int_sequence ) .)
    ID              reduce using rule 31 (matrix -> ZEROS ( int_sequence ) .)
    IF              reduce using rule 31 (matrix -> ZEROS ( int_sequence ) .)
    WHILE           reduce using rule 31 (matrix -> ZEROS ( int_sequence ) .)
    FOR             reduce using rule 31 (matrix -> ZEROS ( int_sequence ) .)
    RETURN          reduce using rule 31 (matrix -> ZEROS ( int_sequence ) .)
    BREAK           reduce using rule 31 (matrix -> ZEROS ( int_sequence ) .)
    CONTINUE        reduce using rule 31 (matrix -> ZEROS ( int_sequence ) .)
    PRINT           reduce using rule 31 (matrix -> ZEROS ( int_sequence ) .)


state 130

    (32) matrix -> ONES ( int_sequence ) .

    ;               reduce using rule 32 (matrix -> ONES ( int_sequence ) .)
    '               reduce using rule 32 (matrix -> ONES ( int_sequence ) .)
    +               reduce using rule 32 (matrix -> ONES ( int_sequence ) .)
    *               reduce using rule 32 (matrix -> ONES ( int_sequence ) .)
    -               reduce using rule 32 (matrix -> ONES ( int_sequence ) .)
    /               reduce using rule 32 (matrix -> ONES ( int_sequence ) .)
    DOTADD          reduce using rule 32 (matrix -> ONES ( int_sequence ) .)
    DOTSUB          reduce using rule 32 (matrix -> ONES ( int_sequence ) .)
    DOTMUL          reduce using rule 32 (matrix -> ONES ( int_sequence ) .)
    DOTDIV          reduce using rule 32 (matrix -> ONES ( int_sequence ) .)
    EQ              reduce using rule 32 (matrix -> ONES ( int_sequence ) .)
    NEQ             reduce using rule 32 (matrix -> ONES ( int_sequence ) .)
    >               reduce using rule 32 (matrix -> ONES ( int_sequence ) .)
    <               reduce using rule 32 (matrix -> ONES ( int_sequence ) .)
    LE              reduce using rule 32 (matrix -> ONES ( int_sequence ) .)
    GE              reduce using rule 32 (matrix -> ONES ( int_sequence ) .)
    ,               reduce using rule 32 (matrix -> ONES ( int_sequence ) .)
    )               reduce using rule 32 (matrix -> ONES ( int_sequence ) .)
    ]               reduce using rule 32 (matrix -> ONES ( int_sequence ) .)
    :               reduce using rule 32 (matrix -> ONES ( int_sequence ) .)
    {               reduce using rule 32 (matrix -> ONES ( int_sequence ) .)
    ID              reduce using rule 32 (matrix -> ONES ( int_sequence ) .)
    IF              reduce using rule 32 (matrix -> ONES ( int_sequence ) .)
    WHILE           reduce using rule 32 (matrix -> ONES ( int_sequence ) .)
    FOR             reduce using rule 32 (matrix -> ONES ( int_sequence ) .)
    RETURN          reduce using rule 32 (matrix -> ONES ( int_sequence ) .)
    BREAK           reduce using rule 32 (matrix -> ONES ( int_sequence ) .)
    CONTINUE        reduce using rule 32 (matrix -> ONES ( int_sequence ) .)
    PRINT           reduce using rule 32 (matrix -> ONES ( int_sequence ) .)


state 131

    (36) matrix_row -> matrix_row , value .

    ]               reduce using rule 36 (matrix_row -> matrix_row , value .)
    ,               reduce using rule 36 (matrix_row -> matrix_row , value .)


state 132

    (62) conditional_statement -> IF ( logic_op ) conditional_instructions ELSE . conditional_instructions
    (63) conditional_instructions -> . statement
    (64) conditional_instructions -> . { statements }
    (6) statement -> . assignment
    (7) statement -> . flow_control
    (8) assignment -> . variable assignment_op expression ;
    (54) flow_control -> . conditional_statement
    (55) flow_control -> . while_loop
    (56) flow_control -> . for_loop
    (57) flow_control -> . return_instr
    (58) flow_control -> . break_instr
    (59) flow_control -> . continue_instr
    (60) flow_control -> . print_instr
    (24) variable -> . ID
    (25) variable -> . matrix_access
    (61) conditional_statement -> . IF ( logic_op ) conditional_instructions
    (62) conditional_statement -> . IF ( logic_op ) conditional_instructions ELSE conditional_instructions
    (65) while_loop -> . WHILE ( logic_op ) conditional_instructions
    (66) for_loop -> . FOR ID = expression : expression conditional_instructions
    (67) return_instr -> . RETURN expression ;
    (69) break_instr -> . BREAK ;
    (68) continue_instr -> . CONTINUE ;
    (70) print_instr -> . PRINT instructions_to_print ;
    (29) matrix_access -> . ID [ int_sequence ]

    {               shift and go to state 125
    ID              shift and go to state 15
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    RETURN          shift and go to state 20
    BREAK           shift and go to state 21
    CONTINUE        shift and go to state 22
    PRINT           shift and go to state 23

    conditional_instructions       shift and go to state 135
    statement                      shift and go to state 124
    assignment                     shift and go to state 5
    flow_control                   shift and go to state 6
    variable                       shift and go to state 7
    conditional_statement          shift and go to state 8
    while_loop                     shift and go to state 9
    for_loop                       shift and go to state 10
    return_instr                   shift and go to state 11
    break_instr                    shift and go to state 12
    continue_instr                 shift and go to state 13
    print_instr                    shift and go to state 14
    matrix_access                  shift and go to state 16

state 133

    (64) conditional_instructions -> { statements . }
    (3) statements -> statements . statement
    (5) statements -> statements . { statements }
    (6) statement -> . assignment
    (7) statement -> . flow_control
    (8) assignment -> . variable assignment_op expression ;
    (54) flow_control -> . conditional_statement
    (55) flow_control -> . while_loop
    (56) flow_control -> . for_loop
    (57) flow_control -> . return_instr
    (58) flow_control -> . break_instr
    (59) flow_control -> . continue_instr
    (60) flow_control -> . print_instr
    (24) variable -> . ID
    (25) variable -> . matrix_access
    (61) conditional_statement -> . IF ( logic_op ) conditional_instructions
    (62) conditional_statement -> . IF ( logic_op ) conditional_instructions ELSE conditional_instructions
    (65) while_loop -> . WHILE ( logic_op ) conditional_instructions
    (66) for_loop -> . FOR ID = expression : expression conditional_instructions
    (67) return_instr -> . RETURN expression ;
    (69) break_instr -> . BREAK ;
    (68) continue_instr -> . CONTINUE ;
    (70) print_instr -> . PRINT instructions_to_print ;
    (29) matrix_access -> . ID [ int_sequence ]

    }               shift and go to state 136
    {               shift and go to state 25
    ID              shift and go to state 15
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    RETURN          shift and go to state 20
    BREAK           shift and go to state 21
    CONTINUE        shift and go to state 22
    PRINT           shift and go to state 23

    statement                      shift and go to state 24
    assignment                     shift and go to state 5
    flow_control                   shift and go to state 6
    variable                       shift and go to state 7
    conditional_statement          shift and go to state 8
    while_loop                     shift and go to state 9
    for_loop                       shift and go to state 10
    return_instr                   shift and go to state 11
    break_instr                    shift and go to state 12
    continue_instr                 shift and go to state 13
    print_instr                    shift and go to state 14
    matrix_access                  shift and go to state 16

state 134

    (66) for_loop -> FOR ID = expression : expression . conditional_instructions
    (52) un_op -> expression . '
    (38) bin_op -> expression . + expression
    (39) bin_op -> expression . * expression
    (40) bin_op -> expression . - expression
    (41) bin_op -> expression . / expression
    (42) bin_op -> expression . DOTADD expression
    (43) bin_op -> expression . DOTSUB expression
    (44) bin_op -> expression . DOTMUL expression
    (45) bin_op -> expression . DOTDIV expression
    (46) logic_op -> expression . EQ expression
    (47) logic_op -> expression . NEQ expression
    (48) logic_op -> expression . > expression
    (49) logic_op -> expression . < expression
    (50) logic_op -> expression . LE expression
    (51) logic_op -> expression . GE expression
    (63) conditional_instructions -> . statement
    (64) conditional_instructions -> . { statements }
    (6) statement -> . assignment
    (7) statement -> . flow_control
    (8) assignment -> . variable assignment_op expression ;
    (54) flow_control -> . conditional_statement
    (55) flow_control -> . while_loop
    (56) flow_control -> . for_loop
    (57) flow_control -> . return_instr
    (58) flow_control -> . break_instr
    (59) flow_control -> . continue_instr
    (60) flow_control -> . print_instr
    (24) variable -> . ID
    (25) variable -> . matrix_access
    (61) conditional_statement -> . IF ( logic_op ) conditional_instructions
    (62) conditional_statement -> . IF ( logic_op ) conditional_instructions ELSE conditional_instructions
    (65) while_loop -> . WHILE ( logic_op ) conditional_instructions
    (66) for_loop -> . FOR ID = expression : expression conditional_instructions
    (67) return_instr -> . RETURN expression ;
    (69) break_instr -> . BREAK ;
    (68) continue_instr -> . CONTINUE ;
    (70) print_instr -> . PRINT instructions_to_print ;
    (29) matrix_access -> . ID [ int_sequence ]

    '               shift and go to state 67
    +               shift and go to state 68
    *               shift and go to state 69
    -               shift and go to state 70
    /               shift and go to state 71
    DOTADD          shift and go to state 72
    DOTSUB          shift and go to state 73
    DOTMUL          shift and go to state 74
    DOTDIV          shift and go to state 75
    EQ              shift and go to state 76
    NEQ             shift and go to state 77
    >               shift and go to state 78
    <               shift and go to state 79
    LE              shift and go to state 80
    GE              shift and go to state 81
    {               shift and go to state 125
    ID              shift and go to state 15
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    RETURN          shift and go to state 20
    BREAK           shift and go to state 21
    CONTINUE        shift and go to state 22
    PRINT           shift and go to state 23

    conditional_instructions       shift and go to state 137
    statement                      shift and go to state 124
    assignment                     shift and go to state 5
    flow_control                   shift and go to state 6
    variable                       shift and go to state 7
    conditional_statement          shift and go to state 8
    while_loop                     shift and go to state 9
    for_loop                       shift and go to state 10
    return_instr                   shift and go to state 11
    break_instr                    shift and go to state 12
    continue_instr                 shift and go to state 13
    print_instr                    shift and go to state 14
    matrix_access                  shift and go to state 16

state 135

    (62) conditional_statement -> IF ( logic_op ) conditional_instructions ELSE conditional_instructions .

    {               reduce using rule 62 (conditional_statement -> IF ( logic_op ) conditional_instructions ELSE conditional_instructions .)
    ID              reduce using rule 62 (conditional_statement -> IF ( logic_op ) conditional_instructions ELSE conditional_instructions .)
    IF              reduce using rule 62 (conditional_statement -> IF ( logic_op ) conditional_instructions ELSE conditional_instructions .)
    WHILE           reduce using rule 62 (conditional_statement -> IF ( logic_op ) conditional_instructions ELSE conditional_instructions .)
    FOR             reduce using rule 62 (conditional_statement -> IF ( logic_op ) conditional_instructions ELSE conditional_instructions .)
    RETURN          reduce using rule 62 (conditional_statement -> IF ( logic_op ) conditional_instructions ELSE conditional_instructions .)
    BREAK           reduce using rule 62 (conditional_statement -> IF ( logic_op ) conditional_instructions ELSE conditional_instructions .)
    CONTINUE        reduce using rule 62 (conditional_statement -> IF ( logic_op ) conditional_instructions ELSE conditional_instructions .)
    PRINT           reduce using rule 62 (conditional_statement -> IF ( logic_op ) conditional_instructions ELSE conditional_instructions .)
    $end            reduce using rule 62 (conditional_statement -> IF ( logic_op ) conditional_instructions ELSE conditional_instructions .)
    }               reduce using rule 62 (conditional_statement -> IF ( logic_op ) conditional_instructions ELSE conditional_instructions .)
    ELSE            reduce using rule 62 (conditional_statement -> IF ( logic_op ) conditional_instructions ELSE conditional_instructions .)


state 136

    (64) conditional_instructions -> { statements } .

    ELSE            reduce using rule 64 (conditional_instructions -> { statements } .)
    {               reduce using rule 64 (conditional_instructions -> { statements } .)
    ID              reduce using rule 64 (conditional_instructions -> { statements } .)
    IF              reduce using rule 64 (conditional_instructions -> { statements } .)
    WHILE           reduce using rule 64 (conditional_instructions -> { statements } .)
    FOR             reduce using rule 64 (conditional_instructions -> { statements } .)
    RETURN          reduce using rule 64 (conditional_instructions -> { statements } .)
    BREAK           reduce using rule 64 (conditional_instructions -> { statements } .)
    CONTINUE        reduce using rule 64 (conditional_instructions -> { statements } .)
    PRINT           reduce using rule 64 (conditional_instructions -> { statements } .)
    $end            reduce using rule 64 (conditional_instructions -> { statements } .)
    }               reduce using rule 64 (conditional_instructions -> { statements } .)


state 137

    (66) for_loop -> FOR ID = expression : expression conditional_instructions .

    {               reduce using rule 66 (for_loop -> FOR ID = expression : expression conditional_instructions .)
    ID              reduce using rule 66 (for_loop -> FOR ID = expression : expression conditional_instructions .)
    IF              reduce using rule 66 (for_loop -> FOR ID = expression : expression conditional_instructions .)
    WHILE           reduce using rule 66 (for_loop -> FOR ID = expression : expression conditional_instructions .)
    FOR             reduce using rule 66 (for_loop -> FOR ID = expression : expression conditional_instructions .)
    RETURN          reduce using rule 66 (for_loop -> FOR ID = expression : expression conditional_instructions .)
    BREAK           reduce using rule 66 (for_loop -> FOR ID = expression : expression conditional_instructions .)
    CONTINUE        reduce using rule 66 (for_loop -> FOR ID = expression : expression conditional_instructions .)
    PRINT           reduce using rule 66 (for_loop -> FOR ID = expression : expression conditional_instructions .)
    $end            reduce using rule 66 (for_loop -> FOR ID = expression : expression conditional_instructions .)
    }               reduce using rule 66 (for_loop -> FOR ID = expression : expression conditional_instructions .)
    ELSE            reduce using rule 66 (for_loop -> FOR ID = expression : expression conditional_instructions .)

